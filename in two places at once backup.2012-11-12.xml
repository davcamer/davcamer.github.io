<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/2.9.2" created="2012-11-12 21:00"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>in two places at once</title>
	<link>http://intwoplacesatonce.com</link>
	<description>instead of a rewrite</description>
	<pubDate>Thu, 01 Sep 2011 03:42:26 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.9.2</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://intwoplacesatonce.com</wp:base_site_url>
	<wp:base_blog_url>http://intwoplacesatonce.com</wp:base_blog_url>
	<wp:category><wp:category_nicename>automation</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[automation]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>bash</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[bash]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>batch-files</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[batch files]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>blocks</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[blocks]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>broken-code</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[broken code]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>brutal-cast</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[brutal cast]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>c</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[c#]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>casting</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[casting]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>cmd-scripts</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[cmd scripts]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>code-on-bitbucket</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[code on bitbucket]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>compiler</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[compiler]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>composition-over-inheritance</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[composition over inheritance]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>cruisecontrol-net</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CruiseControl.net]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>debugging</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[debugging]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>dispatch</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[dispatch]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>dispose</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[dispose]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>duplication</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[duplication]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>dynamic</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[dynamic]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>extension-methods</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[extension methods]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>f</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[f#]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>fat32</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[fat32]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>gmaps</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[gmaps]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>go</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[go]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>google-maps</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[google maps]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>hg</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[hg]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>hgsubversion</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[hgsubversion]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>howto</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[howto]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>html</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[html]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>html5</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[html5]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>interactionist</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[interactionist]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>introducing-changeset</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[introducing ChangeSet]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[javascript]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>layout</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[layout]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>lean-on-the-compiler</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[lean on the compiler]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>mercurial</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Mercurial]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>message</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[message]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>meta</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[meta]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>mixin</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[mixin]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>mobile</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[mobile]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>msbuild</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[msbuild]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>object-instantiation</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[object instantiation]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>objective-c</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[objective-c]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>open-source</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[open source]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>partial-classes</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[partial classes]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>performance</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[performance]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>putty</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[putty]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>rdc</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rdc]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>recovery</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[recovery]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>refactoring</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[refactoring]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>remote-desktop-connection</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[remote desktop connection]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>resource-acquisition</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[resource acquisition]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>scope</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[scope]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>screen</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[screen]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>ssh</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ssh]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>ssh-tunnel</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ssh tunnel]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>subversion</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Subversion]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>svcutil</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[svcutil]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>svn</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[svn]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>tcpip</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tcpip]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>test-doubles</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[test doubles]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>testing</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[testing]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>unit-tests</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[unit tests]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>unix</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[unix]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>using</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[using]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>viewport</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[viewport]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>win7</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[win7]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>windows</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[windows]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>winxp</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[winxp]]></wp:cat_name></wp:category>
	<wp:tag><wp:tag_slug>blocks</wp:tag_slug><wp:tag_name><![CDATA[blocks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>compiler</wp:tag_slug><wp:tag_name><![CDATA[compiler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>html</wp:tag_slug><wp:tag_name><![CDATA[html]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>html5</wp:tag_slug><wp:tag_name><![CDATA[html5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>layout</wp:tag_slug><wp:tag_name><![CDATA[layout]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>lean-on-the-compiler</wp:tag_slug><wp:tag_name><![CDATA[lean on the compiler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>meta</wp:tag_slug><wp:tag_name><![CDATA[meta]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mobile</wp:tag_slug><wp:tag_name><![CDATA[mobile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>object-instantiation</wp:tag_slug><wp:tag_name><![CDATA[object instantiation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>resource-acquisition</wp:tag_slug><wp:tag_name><![CDATA[resource acquisition]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>scope</wp:tag_slug><wp:tag_name><![CDATA[scope]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>screen</wp:tag_slug><wp:tag_name><![CDATA[screen]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>using</wp:tag_slug><wp:tag_name><![CDATA[using]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>viewport</wp:tag_slug><wp:tag_name><![CDATA[viewport]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>viewport-meta-tag-html-html5-mobile-web-layout</wp:tag_slug><wp:tag_name><![CDATA[viewport meta tag html html5 mobile web layout]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>web</wp:tag_slug><wp:tag_name><![CDATA[web]]></wp:tag_name></wp:tag>
		<item>
<title>screen-capture.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=5</link>
<pubDate>Mon, 18 May 2009 06:49:38 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>5</wp:post_id>
<wp:post_date>2009-05-18 06:49:38</wp:post_date>
<wp:post_date_gmt>2009-05-18 06:49:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/05/screen-capture.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"722";s:6:"height";s:3:"315";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:26:"2009/05/screen-capture.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"screen-capture-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"screen-capture-300x130.png";s:5:"width";s:3:"300";s:6:"height";s:3:"130";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>s:471:"a:5:{s:5:"width";s:3:"722";s:6:"height";s:3:"315";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/412/7237313/files/2009/05/screen-capture.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}";</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture-1.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=6</link>
<pubDate>Mon, 18 May 2009 07:07:52 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-1.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>6</wp:post_id>
<wp:post_date>2009-05-18 07:07:52</wp:post_date>
<wp:post_date_gmt>2009-05-18 07:07:52</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-1-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-1.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/05/screen-capture-1.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"300";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:28:"2009/05/screen-capture-1.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"screen-capture-1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>s:472:"a:5:{s:5:"width";s:3:"300";s:6:"height";s:3:"300";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/412/7237313/files/2009/05/screen-capture-1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}";</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture-2.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=7</link>
<pubDate>Mon, 18 May 2009 07:20:09 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-2.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>7</wp:post_id>
<wp:post_date>2009-05-18 07:20:09</wp:post_date>
<wp:post_date_gmt>2009-05-18 07:20:09</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-2-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-2.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/05/screen-capture-2.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"260";s:14:"hwstring_small";s:23:"height='96' width='110'";s:4:"file";s:28:"2009/05/screen-capture-2.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"screen-capture-2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>s:473:"a:5:{s:5:"width";s:3:"300";s:6:"height";s:3:"260";s:14:"hwstring_small";s:23:"height='96' width='110'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/412/7237313/files/2009/05/screen-capture-2.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}";</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture-3.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=8</link>
<pubDate>Mon, 18 May 2009 07:29:33 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-3.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>8</wp:post_id>
<wp:post_date>2009-05-18 07:29:33</wp:post_date>
<wp:post_date_gmt>2009-05-18 07:29:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-3-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-3.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/05/screen-capture-3.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"197";s:14:"hwstring_small";s:23:"height='84' width='128'";s:4:"file";s:28:"2009/05/screen-capture-3.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"screen-capture-3-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>s:473:"a:5:{s:5:"width";s:3:"300";s:6:"height";s:3:"197";s:14:"hwstring_small";s:23:"height='84' width='128'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/412/7237313/files/2009/05/screen-capture-3.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}";</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>compiler created modules in F#</title>
<link>http://intwoplacesatonce.com/2009/05/compiler-created-modules-in-f/</link>
<pubDate>Mon, 18 May 2009 08:53:01 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="f"><![CDATA[f#]]></category>

<guid isPermaLink="false">http://twoplaces.wordpress.com/?p=3</guid>
<description></description>
<content:encoded><![CDATA[Lately I've been learning F#. I have used SML before for little experiments. SML is one of F#'s parents, and a lot of the basic syntax is familiar. The things I've been learning and discovering the most about are the large-scale issues. How does C# call F#? C# call F#? Or even, F# call F#? I wasn't expecting that last one to be a challenge, but it was. Here's why...

I started in the way I start almost any project: code in one place, tests in another. My first goal is to get the tests calling the code. This means a trivial test like making sure that a function returns true, when it... returns true.

<img src="http://twoplaces.files.wordpress.com/2009/05/screen-capture-4.png" border="0" alt="screen-capture-4.png" width="527" height="332" />

This is about the simplest F# solution I can picture. I'm already stumbling though, as evidenced by the red squiggly underneath always_true in TestsFile.fs. That squiggle is for a "The value or constructor 'always_true' is not defined." error. But it is defined, over in CodeFile.fs, and I have no idea how to be more specific because all my declarations are top-level. I haven't had to add any namespace or type names, which is nice. But as a result, I don't know which namespaces or types these items are part of.

Opening the assemblies in reflector might help:

<img src="http://twoplaces.files.wordpress.com/2009/05/screen-capture-1.png" border="0" alt="screen-capture-1.png" width="300" height="300" />

There it is! My top-level declarations in CodeFile.fs are part of the CodeFile type in no namespace. always_true is there as a public static method, and my_true is there as a get-only public static property. There are three other internal types in there that have been created by the compiler.

F# will provide this automatic module even if an explicit module is declared in the file. For example, you might think that since always_true and my_true ended up as part of the CodeFile type, that the code in the screenshot above is equivalent to
<pre lang="ocaml">module CodeFile =
    let my_true = true
    let always_true () = my_true</pre>
Just to check, I'll compile that and open it up in Reflector again.

<img src="http://twoplaces.files.wordpress.com/2009/05/screen-capture-2.png" border="0" alt="screen-capture-2.png" width="300" height="260" />

Instead of overwriting the automatic module, the explicitly declared module is nested inside of the automatic module. The public static type CodeFile, has a nested public static type CodeFile+CodeFile. Not what I was expecting.

The automatic module will continue to be produced unless I add a namespace declaration.
<pre lang="ocaml">namespace Code

module CodeFile =
    let my_true = true
    let always_true () = my_true</pre>
This ends up with a structure more familiar from C# work. CodeFile is a type within the Code namespace.

<img src="http://twoplaces.files.wordpress.com/2009/05/screen-capture-3.png" border="0" alt="screen-capture-3.png" width="300" height="197" />

I now have a pretty good picture of how the automatic naming works, but there are still scenarios I'd like to try. First, what happens if I declare a namespace but don't include an explicit module declaration? I have a hunch, but I'll try it to confirm.

This surprised me! This is a compile-time error. There is no automatic module creation to make this work.
<pre lang="ocaml">namespace Code

let my_true = true // compile-time error: "Namespaces may not contain values.
                   // Consider using a module to hold your value declarations."

module CodeFile =
    let always_true () = my_true // ok</pre>
The second question I had in mind was about mixing a module declaration and top-level declarations in one file. This has been resolved by the previous findings, though. If my file has a namespace declaration, the top-level declarations will be illegal. If it does not have a namespace declaration, then an automatic module with the name of the file will be created.

This is a simpler result than I was expecting, because it means there is only a single rule at play:
<ol>
	<li>If an .fs file does not include a namespace declaration, a module will be created in the top-most namespace to contain the file's declarations.</li>
</ol>
Knowing this, I can return my code under test to how it looked before and get my tests working.

In CodeFile.fs, in the Code project:
<pre lang="ocaml">#light

let always_true () = true</pre>
In TestsFile.fs, in the Tests project:
<pre lang="ocaml">#light

open Xunit

[<Fact>] let true_is_true () = Assert.True(CodeFile.always_true ())</pre>]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>9</wp:post_id>
<wp:post_date>2009-05-18 08:53:01</wp:post_date>
<wp:post_date_gmt>2009-05-18 08:53:01</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>compiler-created-modules-in-f</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1272456284</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>2</wp:comment_id>
<wp:comment_author><![CDATA[Real World Functional Programming: Book Review at Mark Needham]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.markhneedham.com/blog/2009/05/24/real-world-functional-programming-book-review/</wp:comment_author_url>
<wp:comment_author_IP>194.154.164.100</wp:comment_author_IP>
<wp:comment_date>2009-05-24 09:30:15</wp:comment_date>
<wp:comment_date_gmt>2009-05-24 09:30:15</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] Dave Cameron has written more about this. [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>screen-capture-4.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=13</link>
<pubDate>Mon, 18 May 2009 12:07:09 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-4.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>13</wp:post_id>
<wp:post_date>2009-05-18 12:07:09</wp:post_date>
<wp:post_date_gmt>2009-05-18 12:07:09</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-4-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/05/screen-capture-4.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/05/screen-capture-4.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"527";s:6:"height";s:3:"332";s:14:"hwstring_small";s:23:"height='80' width='128'";s:4:"file";s:28:"2009/05/screen-capture-4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"screen-capture-4-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"screen-capture-4-300x188.png";s:5:"width";s:3:"300";s:6:"height";s:3:"188";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>s:473:"a:5:{s:5:"width";s:3:"527";s:6:"height";s:3:"332";s:14:"hwstring_small";s:23:"height='80' width='128'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/412/7237313/files/2009/05/screen-capture-4.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}";</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=18</link>
<pubDate>Tue, 07 Jul 2009 09:20:38 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>18</wp:post_id>
<wp:post_date>2009-07-07 09:20:38</wp:post_date>
<wp:post_date_gmt>2009-07-07 09:20:38</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-png-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/07/screen-capture.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"565";s:6:"height";s:3:"370";s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:26:"2009/07/screen-capture.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"screen-capture-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"screen-capture-300x196.png";s:5:"width";s:3:"300";s:6:"height";s:3:"196";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>introducing a ChangeSet class to CruiseControl.net: why?</title>
<link>http://intwoplacesatonce.com/2009/07/introducing-a-changeset-class-to-cruisecontrol-net-why/</link>
<pubDate>Tue, 07 Jul 2009 09:20:51 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="cruisecontrol-net"><![CDATA[CruiseControl.net]]></category>
<category domain="category" nicename="c"><![CDATA[c#]]></category>
<category domain="category" nicename="introducing-changeset"><![CDATA[introducing ChangeSet]]></category>
<category domain="category" nicename="refactoring"><![CDATA[refactoring]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=19</guid>
<description></description>
<content:encoded><![CDATA[I want to make changes to CruiseControl.net's object model to introduce the concept of <a href="http://mercurial.selenic.com/wiki/ChangeSet">Changesets</a>. This is going to be a large change, so I'm expecting I'll make a few more posts about it. My colleague <a href="http://www.markhneedham.com/blog/">Mark Needham</a> already posted about a dojo where we did <a href="http://www.markhneedham.com/blog/2009/06/12/coding-dojo-17-refactoring-cruise-control-net/">some experimentation</a> around this.

One of the important concepts in CruiseControl.net's domain is changes to source code. Right now, those changes are modeled with a Modification class:

<pre lang="csharp">///
/// Value object representing the data associated with a source control modification.
///
[XmlRoot("modification")]
public class Modification : IComparable
{
    public string Type = "unknown";
    public string FileName;
    public string FolderName;
    public DateTime ModifiedTime;
    public string UserName;
    public string ChangeNumber;
    public string Version = string.Empty;
    public string Comment;
    public string Url;
    public string IssueUrl;
    public string EmailAddress;
</pre>

Modification was part of the <a href="http://bitbucket.org/davcamer/ccnet/changeset/e1e92ee1a612/">first commit</a> to sourceforge. Even back then, CruiseControl.net supported <a href="http://bitbucket.org/davcamer/ccnet/src/457be6a966b7/project/core/sourcecontrol/">several source control</a> types: file-based, Perforce, PVCS, StarTeam and Visual Source Safe. A Modification object represents changes to one file. StarTeam, Perforce and PVCS have the concept of atomic changesets, but this is not supported by the model.

Changesets, though, <a href="http://www.catb.org/esr/writings/version-control/version-control.html#files_vs_filesets">are important</a>. All new SCM systems deal primarily with changesets, rather than single file modifications. This has been the dominant model since at least the year 2000 when Subversion was released. Because they are important, I would like to change ccnet to support them as first-class members of the model. Otherwise, there ends up being code like the following, which is primarily concerned with reconstructing changesets for display purposes:

<pre lang="csharp">private string WriteModificationsSummary(IEnumerable modifications)
{
    const string modificationHeaderFormat = "<tr><td>{0}</td><td>{1}</td></tr>";
    const string issueLinkFormat = "<tr><td>IssueLink</td><td><a>{0}</a></td></tr>";
    StringWriter mods = new StringWriter();

    mods.WriteLine("<h4>Modifications in build :</h4>");
    mods.WriteLine("<table>");
    ArrayList alreadyAdded = new ArrayList();
    foreach (Modification modification in modifications)
    {
        string modificationChecksum = modification.UserName + "__CCNET__" + modification.Comment;

        if (!alreadyAdded.Contains(modificationChecksum))
        {
            alreadyAdded.Add(modificationChecksum);

            mods.WriteLine(string.Format(modificationHeaderFormat,
                                         modification.UserName,
                                         modification.Comment));

            if (!string.IsNullOrEmpty(modification.IssueUrl))
            {
                mods.WriteLine(string.Format(issueLinkFormat,
                                             modification.IssueUrl));
            }
        }
    }
    mods.WriteLine("</table>");

    return mods.ToString();
}
</pre>

I know that I want to introduce a Changeset class. This Changeset will represent the changesets from SCMs that have the concept. For SCMs that don't it can represent groups of changes with the same comment and committer name, much like in the code above. In the long term, it should replace the Modification class.

At this point in any refactoring, I try to assess how much impact the refactoring will have. The way I go about the refactoring will be different if a lot of files will be touched, compared to one where only a few files will be touched. This is where ReSharper's Find Usage functionality really shines:

<img src="http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture.png" alt="screen-capture.png" border="0" width="565" height="370" />

859 usages! So this is going to be a big refactoring. Even considering test code separately from application code: 291 in the application code, the remaining 563 in test code. There are 5 unlisted usages. I'm not sure why.

The "shape" of the listing is important as well as the size. The vast majority of the usages are in the Sourcecontrol namespace. I was expecting a lot of changes in the Sourcecontrol area because those classes will be returning a different type of object. That is the point of the refactoring. I was hoping for minimal impact on the rest of the ccnet code where Modification objects are consumed. Even in the long term, we can use an adapter sort of approach to work with Sourcecontrol blocks that can't be updated to directly produce Changesets. But in the rest of the application, it would be nice to completely remove Modification in a short to medium time frame. Only relatively few places in Publishers, Tasks and Core will need to be changed to accomplish that. So, even though there are many references to the Modification class they are in a good place for this change to work.

The only other thing of note on the listing is that a capitilization difference, "Sourcecontrol" versus "SourceControl", is causing the test's namespace to be split. At least that's a quick fix.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>19</wp:post_id>
<wp:post_date>2009-07-07 09:20:51</wp:post_date>
<wp:post_date_gmt>2009-07-07 09:20:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>introducing-a-changeset-class-to-cruisecontrol-net-why</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1246959827</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture-1.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=28</link>
<pubDate>Wed, 08 Jul 2009 11:45:32 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-1.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>28</wp:post_id>
<wp:post_date>2009-07-08 21:45:32</wp:post_date>
<wp:post_date_gmt>2009-07-08 11:45:32</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-1-png-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-1.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/07/screen-capture-1.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"441";s:6:"height";s:3:"434";s:14:"hwstring_small";s:22:"height='96' width='97'";s:4:"file";s:28:"2009/07/screen-capture-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"screen-capture-1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"screen-capture-1-300x295.png";s:5:"width";s:3:"300";s:6:"height";s:3:"295";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>introducing a ChangeSet class to CruiseControl.net: shifting to supertypes</title>
<link>http://intwoplacesatonce.com/2009/07/introducing-a-changeset-class-to-cruisecontrol-net-shifting-to-supertypes/</link>
<pubDate>Wed, 08 Jul 2009 12:41:33 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="cruisecontrol-net"><![CDATA[CruiseControl.net]]></category>
<category domain="category" nicename="c"><![CDATA[c#]]></category>
<category domain="category" nicename="introducing-changeset"><![CDATA[introducing ChangeSet]]></category>
<category domain="category" nicename="refactoring"><![CDATA[refactoring]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=29</guid>
<description></description>
<content:encoded><![CDATA[When I refactor, I try to get the first piece of the change in with absolute minimal impact on the surrounding code. Once that first bit of the change is in, it often feels like the rest of the code will change itself to adapt. Those changes turn out better than what I could have designed up front. Of course, the code isn't changing itself -- the rest of the team is making the changes. Getting a bit of the change in to the actual system is the clearest way I know of communicating the intention to the rest of the team. Then if my idea makes any sense, the team will get ideas and make changes of their own.

I am taking the same approach with this refactoring. As a first stage, introduce ChangeSet with minimal impact on the rest of the code. Give time for the team to see some of the possibilities. Not removing any existing classes at this point.

What makes this different from refactorings I have done at my day job is the number of people involved. <a href="http://www.stevetrefethen.com/blog/">Steve Trefethen</a> reminded me of this on the <a href="http://groups.google.com.au/group/ccnet-devel/msg/da8e7de5cb0c2add?hl=en">mailing list</a> today. I had not even considered that someone may have subclassed <a href="http://bitbucket.org/davcamer/ccnet/src/0375206b36d0/project/core/sourcecontrol/Modification.cs">Modification</a> for their own purposes. But they have. Steve has been on the receiving end of <a href="http://groups.google.com.au/group/ccnet-devel/browse_thread/thread/542ce5a39d5a9859/e0c1762e10d77313?hl=en&lnk=gst&q=strefethen+processexecutor#e0c1762e10d77313">painful breaking changes</a> in the past, so I want to listen carefully to his objections and hopefully minimise his pain. Users sticking with old versions complicates support. And, although Steve is only one user there are probably dozens or hundreds of users experiencing the same issues he is raising.

Now what can be done to avoid breaking other's code. This whole refactoring centres around one method on the <a href="http://bitbucket.org/davcamer/ccnet/src/tip/project/core/sourcecontrol/ISourceControl.cs">ISourceControl</a> interface:
<pre lang="csharp">public interface ISourceControl
{
	Modification[] GetModifications(IIntegrationResult from, IIntegrationResult to);</pre>
All the Modification objects in the system are originally returned by a call to this method. The capability to return ChangeSets needs to be introduced at this point. But, changing all the existing implementers of ISourceControl to return ChangeSets at the same time would be too much work. It would also require a lot of users to change their code, because ISourceControl is one of the natural extension points of the system. Fortunately, .net is on my side with this one.

A quick digression to sing the praises of .net. Every single type in .net derives from <a href="http://msdn.microsoft.com/en-us/library/system.object.aspx">Object</a>, including all the apparently built-in types like <a href="http://msdn.microsoft.com/en-us/library/system.array.aspx">arrays</a>. The compiler does work some magic around descendants of <a href="http://msdn.microsoft.com/en-us/library/system.valuetype.aspx">ValueType</a> to pass them on the stack. That way small types like <a href="http://msdn.microsoft.com/en-us/library/system.int32.aspx">int</a>, <a href="http://msdn.microsoft.com/en-us/library/system.boolean.aspx">bool</a> and <a href="http://msdn.microsoft.com/en-us/library/system.single.aspx">float</a> work faster than they would otherwise. You can create your own ValueTypes, passed on the stack, using the <a href="http://msdn.microsoft.com/en-us/library/ah19swz4.aspx">struct</a> keyword. All of these still derive from Object.

But getting back to it, every last type is part of the same hierarchy including our Modification[] return type.

<img src="http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-1.png" alt="screen-capture-1.png" border="0" width="441" height="434" />

Changing the return type to one of the supertypes of Modification[] would allow us to introduce a new class. Besides changing the method signature, existing code could remain the same and continue to return Modification[].

Using the type closest to the base of the hierarchy provides the most flexibility for implementing another class. I know from <a href="http://www.markhneedham.com/blog/2009/06/12/coding-dojo-17-refactoring-cruise-control-net/">previous experimentation</a> that we can use IEnumerable&lt;Modification&gt; for everything except the tests. Linq can cover the test requirements. We have not previously included Linq in the CruiseControl.net codebase and I thought it was because of Mono concerns. I've found out today that Linq is included in Mono, so I can use it to update the tests. Time to go make <a href="http://bitbucket.org/davcamer/ccnet/changeset/c6ae81ea556f/">these changes</a>, on a branch.

<pre lang="csharp">public interface ISourceControl
{
	IEnumerable<Modfication> GetModifications(IIntegrationResult from, IIntegrationResult to);</pre>
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>29</wp:post_id>
<wp:post_date>2009-07-08 22:41:33</wp:post_date>
<wp:post_date_gmt>2009-07-08 12:41:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>introducing-a-changeset-class-to-cruisecontrol-net-shifting-to-supertypes</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1247134548</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=33</link>
<pubDate>Sun, 19 Jul 2009 02:11:20 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture1.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>33</wp:post_id>
<wp:post_date>2009-07-19 12:11:20</wp:post_date>
<wp:post_date_gmt>2009-07-19 02:11:20</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-png-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture1.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/07/screen-capture1.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"404";s:6:"height";s:3:"548";s:14:"hwstring_small";s:22:"height='96' width='70'";s:4:"file";s:27:"2009/07/screen-capture1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"screen-capture1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"screen-capture1-221x300.png";s:5:"width";s:3:"221";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture-1.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=34</link>
<pubDate>Sun, 19 Jul 2009 03:31:35 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-11.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>34</wp:post_id>
<wp:post_date>2009-07-19 13:31:35</wp:post_date>
<wp:post_date_gmt>2009-07-19 03:31:35</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-1-png-3</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-11.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/07/screen-capture-11.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"624";s:6:"height";s:3:"412";s:14:"hwstring_small";s:23:"height='84' width='128'";s:4:"file";s:29:"2009/07/screen-capture-11.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"screen-capture-11-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"screen-capture-11-300x198.png";s:5:"width";s:3:"300";s:6:"height";s:3:"198";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>screen-capture-2.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=35</link>
<pubDate>Sun, 19 Jul 2009 03:54:43 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-2.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>35</wp:post_id>
<wp:post_date>2009-07-19 13:54:43</wp:post_date>
<wp:post_date_gmt>2009-07-19 03:54:43</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>screen-capture-2-png-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-2.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/07/screen-capture-2.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"529";s:6:"height";s:3:"411";s:14:"hwstring_small";s:23:"height='96' width='123'";s:4:"file";s:28:"2009/07/screen-capture-2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"screen-capture-2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"screen-capture-2-300x233.png";s:5:"width";s:3:"300";s:6:"height";s:3:"233";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>installing hg subversion on windows to test it</title>
<link>http://intwoplacesatonce.com/2009/07/installing-hg-subversion-on-windows-to-test-it/</link>
<pubDate>Sun, 19 Jul 2009 14:19:28 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="mercurial"><![CDATA[Mercurial]]></category>
<category domain="category" nicename="subversion"><![CDATA[Subversion]]></category>
<category domain="category" nicename="hg"><![CDATA[hg]]></category>
<category domain="category" nicename="hgsubversion"><![CDATA[hgsubversion]]></category>
<category domain="category" nicename="howto"><![CDATA[howto]]></category>
<category domain="category" nicename="open-source"><![CDATA[open source]]></category>
<category domain="category" nicename="svn"><![CDATA[svn]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=36</guid>
<description></description>
<content:encoded><![CDATA[<em>If you follow along, by the end of this blog post you'll be able to run the hgsubversion tests on your Windows system. Unfortunately, it probably won't work 100% correctly for you. Like the <a href="http://bitbucket.org/durin42/hgsubversion/wiki/Home">hgsubversion wiki</a> says, "You should only be using this if you're ready to hack on it, and go diving into the internals of Mercurial and/or Subversion."</em>

I really like <a href="http://mercurial.selenic.com/wiki/Mercurial">Mercurial</a>. I think Subversion is starting to get a little creaky. Even worse, for whatever reason access to the <a href="http://confluence.public.thoughtworks.org/display/CCNET/Welcome+to+CruiseControl.NET">CruiseControl.net</a> <a href="https://ccnet.svn.sourceforge.net/svnroot/ccnet/">subversion repository</a> is so slow for me from Australia that most operations I try eventually time out. It's quite frustrating. Mercurial keeps most of the familiar Subversion operations but adds DVCS goodness like having all history in a local repository. That would nicely solve my speed problems.

I've been maintaining a <a href="http://bitbucket.org/davcamer/ccnet/overview/">Mercurial repository of cc.net on bitbucket</a> for a few months now. I use the excellent <a href="http://bitbucket.org/durin42/hgsubversion/wiki/Home">hg subversion extension</a>, installed on my Mac OS X partition. I don't have an instance of Mercurial on my Windows partition with the hg subversion extension installed. To install on OS X I followed <a href="http://farmdev.com/thoughts/64/try-out-the-mercurial-subversion-extension-hg-svn-on-mac-os-x/">this recipe</a>. I have not found a similarly detailed recipe for Windows. Here's my attempt at writing such a recipe.

The outline is:
<ol>
  <li>install <a href="http://www.python.org/download/releases/2.6.2/">python 2.6</a></li>
  <li><a href="http://mercurial.selenic.com/wiki/WindowsInstall">build and install</a> Mercurial</li>
  <li>download <a href="http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100">subversion binaries</a></li>
  <li>install <a href="http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100">svn-python bindings</a></li>
  <li>install <a href="http://gnuwin32.sourceforge.net/packages/diffutils.htm">gnu diffutils</a></li>
  <li>clone <a href="http://bitbucket.org/durin42/hgsubversion/wiki/Home">hg subversion</a></li>
  <li>configure the <a href="http://mercurial.selenic.com/wiki/Win32TextExtension">win32text extension</a></li>
  <li>install <a href="http://code.google.com/p/python-nose/">nose</a></li>
  <li>run the tests</li>
</ol>

I'll go in to more detail -- the above is at least an advanced level exercise. The entire install is a command-line exercise. Because of that, paths are very important. I use a folder <code>c:\code</code> to work with sources. I'll leave that path in my examples, but remember if you would like to change it to something else that is okay. Do remember to change it everywhere though.

<h4>0. Setting up paths</h4>
During installation I isolated myself somewhat by using a batch file to reset my path. That gave me more confidence that my existing TortoiseSVN and TortoiseHg installs wouldn't interfere with the hgsubversion install. Visual Studio installs a <em>Visual Studio 2008 Commmand Prompt</em> shortcut on to the start menu that opens a command window with specific environment variables set. I copied it to create a similar shortcut for my install work. The shortcut uses these settings:

<img src="http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture1.png" alt="screen-capture.png" border="0" width="404" height="548" />

Then it's a matter of editing <code>set_hg_paths.bat</code> to set the correct <code>%PATH%</code> value. It doesn't matter if <code>%PATH%</code> includes folders that are not yet on disk, so you can set all your paths now and the appropriate pieces will be picked up when they are available. My <code>set_hg_paths.bat</code> file contains:
<pre lang="text">set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.6.3\bin;C:\Program Files\GnuWin32\bin\;c:\windows\system32;c:\windows;c:\windows\system32\wbem;</pre>

<h4>1. Install python 2.6</h4>
Mercurial is written in python, runs on it, and hg subversion is a collection of python scripts so this is absolutely necessary. I downloaded <a href="http://www.python.org/download/releases/2.6.2/">2.6.2</a> from the <a href="http://www.python.org">python home page</a>, and installed it to the default location of <code>c:\python26</code>.

To test this step, open a command prompt using the shortcut from step 0. If you run the commands as shown, you should get the same output: <pre lang="text">c:\code>python --version
Python 2.6.2</pre>

<h4>2. Build and install Mercurial</h4>
I have already tried out Mercurial on Windows, using two different pre-packaged Mercurial distributions: one for <a href="http://mercurial.berkwood.com/">command-line</a> and one following the <a href="http://bitbucket.org/tortoisehg/stable/wiki/Home">TortoiseSCM</a> <a href="http://www.tortoisecvs.org/">tradition</a>.

Unfortunately, the pre-built binaries do not seem to be appropriate for extensions. They package the python run-time internally. This is nice on the one hand because people can get Mercurial with a single download. It does make it difficult to experiment however because it is not clear how to add python and hg extensions to the packaged run-time. Maybe if hgsubversion runs well enough on Windows, it will be included in the packages.

To try out hgsubversion, for now, I needed to download the Mercurial source. There are rough instructions for an <a href="http://mercurial.selenic.com/wiki/WindowsInstall">install from source</a> on the Mercurial wiki. Since I don't yet have a working hg in my installation environment, I downloaded the <a href="http://mercurial.selenic.com/release/mercurial-1.3.tar.gz">1.3 source archive</a> from the <a href="http://mercurial.selenic.com/release/?M=D">Mercurial site</a>. After downloading I unzipped to <code>c:\code\Mercurial_src</code>. The <a href="http://mercurial.selenic.com/wiki/WindowsInstall#Overview">wiki</a>'s Standard procedure section describes a two-step build process using build and install targets. I followed those steps.

The build step compiles some C code. The <code>%PATH%</code> variable needs a C compiler for build to work. I have Visual Studio 2008 installed and it comes with a batch file to add the tools to the <code>%PATH%</code>. I added it on to the end of my <code>set_hg_paths.bat</code>. The compiler is only needed for this step, so you may prefer to just execute the batch file once.

<pre lang="text">set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.6.3\bin;C:\Program Files\GnuWin32\bin\;c:\windows\system32;c:\windows;c:\windows\system32\wbem;

"c:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat"</pre>

With that set, I opened another command window with the new <code>set_hg_paths.bat</code> and ran the build and install steps. I've pasted the beginning and end of the input below. I also saved the <a href="http://intwoplacesatonce.com/wp-content/uploads/2009/07/mercurial_build.txt" title="mercurial_build.txt">full build and install log</a>.
<pre lang="text">c:\code>set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.6.3\bin;C:\Program Files\GnuWin32\bin\;c
:\windows\system32;c:\windows;c:\windows\system32\wbem;

c:\code>"c:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat"
Setting environment for using Microsoft Visual Studio 2008 x86 tools.

c:\code>echo %PATH%
c:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE;c:\Program Files\Microsoft Visual Studio 9.0\VC\BIN;c:\Program
Files\Microsoft Visual Studio 9.0\Common7\Tools;c:\WINDOWS\Microsoft.NET\Framework\v3.5;c:\WINDOWS\Microsoft.NET\Framewo
rk\v2.0.50727;c:\Program Files\Microsoft Visual Studio 9.0\VC\VCPackages;C:\Program Files\\Microsoft SDKs\Windows\v6.0A\
bin;c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.6.3\bin;C:\Program Files\GnuWin32\bin\;c:\windows\sys
tem32;c:\windows;c:\windows\system32\wbem;

c:\code>cd Mercurial_src

C:\code\Mercurial_src>python setup.py build --force
running build
running build_py
copying mercurial\ancestor.py -> build\lib.win32-2.6\mercurial
.... full log in the attached file ....
copying contrib\win32\hg.bat -> build\scripts-2.6
running build_mo
warning: build_mo: could not find msgfmt executable, no translations will be built

C:\code\Mercurial_src>python setup.py install --force --skip-build
running install
running install_lib
copying build\lib.win32-2.6\hgext\acl.py -> c:\python26\Lib\site-packages\hgext
.... full log in the attached file ....
copying i18n\zh_TW.po -> c:\python26\Lib\site-packages\mercurial\i18n
running install_egg_info
Removing c:\python26\Lib\site-packages\mercurial-1.3-py2.6.egg-info
Writing c:\python26\Lib\site-packages\mercurial-1.3-py2.6.egg-info

C:\code\Mercurial_src></pre>

To test this step, I checked the version of hg that my command-prompt was now picking up. I added a new folder to my <code>%PATH%</code> at this point, although if you followed step 0, you will already have it included.

<pre lang="text">c:\code>echo %PATH%
c:\python26\;c:\python26\scripts\;

c:\code>hg version
Mercurial Distributed SCM (version 1.3)

Copyright (C) 2005-2009 Matt Mackall <mpm@selenic.com> and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</pre>

<h4>3. Download Subversion binaries</h4>
As I said before, Mercurial is written in python. To interact with Subversion it makes calls in to Subversion binaries written in C. The easiest, cleanest way to get an up to date version of the Subversion binaries is to download and install a binary distribution of Subversion. This needs to be compatible with the binaries in the next step, so I <a href="http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100&expandFolder=8100&folderID=8100">got both</a> from Subversion's <a href="http://subversion.tigris.org/getting.html#windows">download page</a> at tigris.org. I downloaded the <a href="http://subversion.tigris.org/svn_1.6_releasenotes.html">1.6.3</a> binaries compiled against Apache 2.2. After downloading the zip package, I unzipped it to <code>c:\Program Files\svn-win32-1.6.3</code>.

The other binary distributions of Subversion are great, but similarly to Mercurial the basic package is preferred here because it is more compatible with extensions. <a href="http://www.sliksvn.com/en/download">Slik</a> has a very easy to install, minimal package that is great for clients where command-line or scripting is used. At my current job we use <a href="http://www.visualsvn.com/server/">VisualSVN Server</a> as our Subversion repository because it is easy to install and administer on Windows. Unfortunately, I don't believe they are useful to us for installing hgsubversion.

After adding <code>C:\Program Files\svn-win32-1.6.3\bin</code> to my <code>set_hg_path.bat</code>, I tested this step by opening a new prompt and checking the version of <code>svn</code> that was being picked up:
<pre lang="text">c:\code>set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.
6.3\bin;

c:\code>svn --version
svn, version 1.6.3 (r38063)
   compiled Jun 22 2009, 09:59:12

Copyright (C) 2000-2009 CollabNet.
Subversion is open source software, see http://subversion.tigris.org/
This product includes software developed by CollabNet (http://www.Collab.Net/).

The following repository access (RA) modules are available:

* ra_neon : Module for accessing a repository via WebDAV protocol using Neon.
  - handles 'http' scheme
  - handles 'https' scheme
* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - handles 'http' scheme
  - handles 'https' scheme</pre>

<h4>4. Install svn-python bindings</h4>
This piece is the "glue-code" that allows Mercurial, written in Python, to call the binary Subversion API, written in C. To side-step as many problems as possible these should be from the same compile that created the Subversion binaries. For that reason, I downloaded <a href="http://subversion.tigris.org/files/documents/15/46152/svn-python-1.6.3.win32-py2.6.exe">my bindings</a> from <a href="http://subversion.tigris.org/servlets/ProjectDocumentList?expandFolder=91&folderID=8100">the same page</a> I used above. These are the python 2.6, svn 1.6.3, apache 2.2, win32 bindings packaged as an executable installer.

After downloading, I ran the executable. The setup wizard automatically detected my Python 2.6 installation.
<img src="http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-11.png" alt="screen-capture-1.png" border="0" width="624" height="412" />

<h4>5. Install gnu diffutils</h4>
Mercurial relies on a command-line <code>diff</code> program. <code>diff</code> is ubiquitous on Unix-related systems, but not a common program on Windows. There is a port of the gnu version for windows available as a package called <a href="http://gnuwin32.sourceforge.net/packages/diffutils.htm">DiffUtils for Windows</a>. I downloaded the <a href="http://gnuwin32.sourceforge.net/downlinks/diffutils.php">Complete package, except sources</a> and ran the wizard to install it.

<img src="http://intwoplacesatonce.com/wp-content/uploads/2009/07/screen-capture-2.png" alt="screen-capture-2.png" border="0" width="529" height="411" />

To check it, I added <code>C:\Program Files\GnuWin32\bin</code> to my <code>%PATH%</code> and ran <code>diff</code> to make sure it could be found:
<pre lang="text">c:\code>set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.
6.3\bin;C:\Program Files\GnuWin32\bin\;

c:\code>diff --version
diff (GNU diffutils) 2.8.7
Written by Paul Eggert, Mike Haertel, David Hayes,
Richard Stallman, and Len Tower.

Copyright (C) 2004 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</pre>

<h4>6. Clone hgsubversion</h4>
Having Mercurial working locally at this point, I used it to clone the <a href="http://bitbucket.org/durin42/hgsubversion/wiki/Home">hgsubversion</a> code from <a href="http://bitbucket.org/">bitbucket</a>. I used the -U option to skip the local working copy checkout, because I want to configure an extension in the repository before getting the local working copy.
<pre lang="text">c:\code>set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.
6.3\bin;C:\Program Files\GnuWin32\bin\;

C:\code>hg clone -U http://bitbucket.org/durin42/hgsubversion/
destination directory: hgsubversion
requesting all changes
adding changesets
adding manifests
adding file changes
added 475 changesets with 1178 changes to 161 files</pre>

<h4>7. Configure the win32text extension</h4>
Mercurial has a convention of storing line endings for text files as line-feeds only, the Unix convention. The Windows convention is to use both carriage-return and line-feed characters to mark line endings. To work with hgsubversion source on Windows without mixing line endings I configured the <a href="http://mercurial.selenic.com/wiki/Win32TextExtension">win32text extension</a> to <a href="http://mercurial.selenic.com/wiki/FAQ#FAQ.2BAC8-TechnicalDetails.What_about_Windows_line_endings_vs._Unix_line_endings.3F">handle conversion</a> as files move in and out of the working copy.

To turn it on, I opened up <code>c:\code\hgsubversion\.hg\hgrc</code> and modified the content as follows:
<pre lang="ini">[paths]
default = http://bitbucket.org/durin42/hgsubversion/

[extensions]
hgext.win32text=

[encode]
# Encode files that don't contain NUL characters.
** = cleverencode:

[decode]
# Decode files that don't contain NUL characters.
** = cleverdecode:

[patch]
# Turn on special handling for line-endings at patch-time
eol = crlf

[hooks]
# Reject commits which would introduce windows-style text" files
pretxncommit.crlf = python:hgext.win32text.forbidcrlf</pre>

After changing the config, I updated my working copy. Although there is a warning, I'm not sure how to best handle it.

<pre lang="text">C:\code>cd hgsubversion

C:\code\hgsubversion>hg update
WARNING: tests/test_push_eol.py already has CRLF line endings
and does not need EOL conversion by the win32text plugin.
Before your next commit, please reconsider your encode/decode settings in
Mercurial.ini or C:\code\hgsubversion\.hg\hgrc.
125 files updated, 0 files merged, 0 files removed, 0 files unresolved</pre>

Feeling a bit curious I opened up the files in <a href="http://notepad-plus.sourceforge.net/uk/site.htm">Notepad++</a>, which can show line ending characters. All the files now had CR-LF endings, as expected.

<h4>8. Install nose</h4>
<a href="http://code.google.com/p/python-nose/">nose</a> is an alternative Python test runner that hgsubversion uses. There is an explanation in the hgsubversion <a href="http://bitbucket.org/durin42/hgsubversion/src/tip/README"><code>README</code> file</a>. Since I thought there would probably be test failures, I decided to install nose.

The easiest way to install nose is with a script called <code>easy_install</code>. The Windows Python distribution does not come with the setuptools package that provides <code>easy_install</code> by default, so I installed it first. There is not yet a self-installing package of setuptools for Windows and Python 2.6. This <a href="http://stackoverflow.com/questions/309412/how-to-setup-setuptools-for-python-2-6-on-windows">stack overflow question</a> referred me to <a href="http://peak.telecommunity.com/dist/ez_setup.py">this script</a> that downloaded and installed setuptools for me. I had to use <em>Save As...</em> in the browser to avoid ending up with html tags and escapes in the script.

<pre lang="text">c:\code>set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.
6.3\bin;C:\Program Files\GnuWin32\bin\;

c:\code>cd ez_setup

C:\code\ez_setup>python ez_setup.py
Downloading http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c9-py
2.6.egg
Processing setuptools-0.6c9-py2.6.egg
Copying setuptools-0.6c9-py2.6.egg to c:\python26\lib\site-packages
Adding setuptools 0.6c9 to easy-install.pth file
Installing easy_install-script.py script to c:\python26\Scripts
Installing easy_install.exe script to c:\python26\Scripts
Installing easy_install-2.6-script.py script to c:\python26\Scripts
Installing easy_install-2.6.exe script to c:\python26\Scripts

Installed c:\python26\lib\site-packages\setuptools-0.6c9-py2.6.egg
Processing dependencies for setuptools==0.6c9
Finished processing dependencies for setuptools==0.6c9</pre>

With easy_install working, it <strong>is</strong> easy to install nose:
<pre lang="text">c:\code>set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.
6.3\bin;C:\Program Files\GnuWin32\bin\;

c:\code>easy_install nose
Searching for nose
Reading http://pypi.python.org/simple/nose/
Reading http://somethingaboutorange.com/mrl/projects/nose/
Best match: nose 0.11.1
Downloading http://somethingaboutorange.com/mrl/projects/nose/nose-0.11.1.tar.gz

Processing nose-0.11.1.tar.gz
Running nose-0.11.1\setup.py -q bdist_egg --dist-dir c:\docume~1\admini~1\locals
~1\temp\easy_install-uirbjm\nose-0.11.1\egg-dist-tmp-kslr2c
no previously-included directories found matching 'doc\.build'
Adding nose 0.11.1 to easy-install.pth file
Installing nosetests-2.6-script.py script to c:\python26\Scripts
Installing nosetests-2.6.exe script to c:\python26\Scripts
Installing nosetests-script.py script to c:\python26\Scripts
Installing nosetests.exe script to c:\python26\Scripts

Installed c:\python26\lib\site-packages\nose-0.11.1-py2.6.egg
Processing dependencies for nose
Finished processing dependencies for nose</pre>

<h4>9. Run the tests</h4>
After all that, I ran the tests by executing <code>nosetests</code> in the hgsubversion folder. The results give many failures. I started working to correct them a couple of weeks ago and posted my work to <a href="http://bitbucket.org/davcamer/hgsubversion-py26-win/">bitbucket</a>. I'll have to write more about that in a subsequent post. Some of the failures today look new to me.

The start and end of the log follows. Again, I've attached the <a href="http://intwoplacesatonce.com/wp-content/uploads/2009/07/hgsubversion_tests.txt" title="hgsubversion_tests.txt">full log</a>.
<pre lang="text">c:\code>set PATH=c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.6.3\bin;C:\Program Files\GnuWin32\bin\;c
:\windows\system32;c:\windows;c:\windows\system32\wbem;

c:\code>"c:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat"
Setting environment for using Microsoft Visual Studio 2008 x86 tools.

c:\code>echo %PATH%
c:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE;c:\Program Files\Microsoft Visual Studio 9.0\VC\BIN;c:\Program
Files\Microsoft Visual Studio 9.0\Common7\Tools;c:\WINDOWS\Microsoft.NET\Framework\v3.5;c:\WINDOWS\Microsoft.NET\Framewo
rk\v2.0.50727;c:\Program Files\Microsoft Visual Studio 9.0\VC\VCPackages;C:\Program Files\\Microsoft SDKs\Windows\v6.0A\
bin;c:\python26\;c:\python26\scripts\;c:\Program Files\svn-win32-1.6.3\bin;C:\Program Files\GnuWin32\bin\;c:\windows\sys
tem32;c:\windows;c:\windows\system32\wbem;

C:\code>cd hgsubversion

C:\code\hgsubversion>python setup.py build
running build
running build_py
copying hgsubversion\util.py -> build\lib\hgsubversion

C:\code\hgsubversion>nosetests
..FEE..F..FFEEFFEEFFEEEEEEEEFFF..EEFFFFFEEFFFFEF.....FF..FFF.FFFFF..EE..FF.EEEEEEEEEEEEEEEEEEE..EEFF..FFFFFFFFFFFFFFFFFF
FFFF..FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEEEFFFFF...EEEEEEFFF......EEEFFEEF
======================================================================
ERROR: test_externals (tests.test_externals.TestFetchExternals)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\code\hgsubversion\tests\test_externals.py", line 60, in test_externals
    self.assertEqual(ref0, repo[0]['.hgsvnexternals'].data())
  File "c:\python26\lib\site-packages\mercurial\context.py", line 84, in __getitem__
    return self.filectx(key)
  File "c:\python26\lib\site-packages\mercurial\context.py", line 159, in filectx
    fileid = self.filenode(path)
  File "c:\python26\lib\site-packages\mercurial\context.py", line 148, in filenode
    return self._fileinfo(path)[0]
  File "c:\python26\lib\site-packages\mercurial\context.py", line 143, in _fileinfo
    _('not found in manifest'))
LookupError: .hgsvnexternals@000000000000: not found in manifest
-------------------- >> begin captured stdout << ---------------------
no changes found

--------------------- >> end captured stdout << ----------------------
.... full text in attached log ....
======================================================================
FAIL: test_rebase (tests.test_utility_commands.UtilityTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\code\hgsubversion\tests\test_utility_commands.py", line 176, in test_rebase
    self.assertEqual(self.repo['tip'].parents()[0].parents()[0], self.repo[0])
AssertionError: <changectx 000000000000> != <changectx 8bc599092f77>
-------------------- >> begin captured stdout << ---------------------
no changes found
2 files updated, 0 files merged, 0 files removed, 0 files unresolved
Nothing to rebase!

--------------------- >> end captured stdout << ----------------------

----------------------------------------------------------------------
Ran 225 tests in 161.242s

FAILED (errors=59, failures=132)</pre>
That's it for now. I believe at this point you could install the extension. Things might not work correctly though. I'm going to attempt to get more tests working locally for myself before I try turning it on and cloning anything. Even after that I'll need to try it with a few different Subversion repositories before using it for code I care about. SCM is too central to my development practices for me to use a shaky system.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>36</wp:post_id>
<wp:post_date>2009-07-20 00:19:28</wp:post_date>
<wp:post_date_gmt>2009-07-19 14:19:28</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>installing-hg-subversion-on-windows-to-test-it</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1248273406</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>mercurial_build.txt</title>
<link>http://intwoplacesatonce.com/?attachment_id=40</link>
<pubDate>Wed, 22 Jul 2009 13:47:59 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/07/mercurial_build.txt</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>40</wp:post_id>
<wp:post_date>2009-07-22 23:47:59</wp:post_date>
<wp:post_date_gmt>2009-07-22 13:47:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>mercurial_build-txt</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/07/mercurial_build.txt</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/07/mercurial_build.txt</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>hgsubversion_tests.txt</title>
<link>http://intwoplacesatonce.com/?attachment_id=41</link>
<pubDate>Wed, 22 Jul 2009 14:15:39 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2009/07/hgsubversion_tests.txt</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>41</wp:post_id>
<wp:post_date>2009-07-23 00:15:39</wp:post_date>
<wp:post_date_gmt>2009-07-22 14:15:39</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>hgsubversion_tests-txt</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2009/07/hgsubversion_tests.txt</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2009/07/hgsubversion_tests.txt</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:0:{}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>measuring msbuild performance</title>
<link>http://intwoplacesatonce.com/2009/08/measuring-msbuild-performance/</link>
<pubDate>Sat, 29 Aug 2009 23:29:36 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="msbuild"><![CDATA[msbuild]]></category>
<category domain="category" nicename="performance"><![CDATA[performance]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=52</guid>
<description></description>
<content:encoded><![CDATA[Recently, while debugging some strange problems with our build, I flipped on MSBuild's <code>diagnostic</code> output level. I was surprised and delighted to see a profile of my build at the end of the output. Here's what the output looks like for <a href="http://confluence.public.thoughtworks.org/display/CCNET/Welcome+to+CruiseControl.NET">CruiseControl.Net's</a> clean target:
<pre lang="text">Project Performance Summary:
       16 ms  C:\code\ccnet-trunk\project\CCTray\CCTray.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\CCTrayLib\CCTrayLib.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\service\service.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\console\console.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\objection\objection.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\WebDashboard\WebDashboard.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\UnitTests\UnitTests.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\core\core.csproj   1 calls
                 16 ms  Clean                                      1 calls
       16 ms  C:\code\ccnet-trunk\project\Remote\Remote.csproj   1 calls
                 16 ms  Clean                                      1 calls
       31 ms  C:\code\ccnet-trunk\project\Validator\Validator.csproj   1 calls
                 31 ms  Clean                                      1 calls
      297 ms  C:\code\ccnet-trunk\project\ccnet.sln      1 calls
                297 ms  clean                                      1 calls

Target Performance Summary:
        0 ms  CleanReferencedProjects                   10 calls
        0 ms  SplitProjectReferencesByType               8 calls
        0 ms  BeforeClean                               10 calls
        0 ms  ValidateToolsVersions                      1 calls
        0 ms  AfterClean                                10 calls
        0 ms  CleanPublishFolder                        10 calls
       16 ms  _CheckForInvalidConfigurationAndPlatform  10 calls
       16 ms  _SplitProjectReferencesByFileExistence    10 calls
       16 ms  ValidateSolutionConfiguration              1 calls
      141 ms  CoreClean                                 10 calls
      281 ms  Clean                                     11 calls

Task Performance Summary:
        0 ms  FindUnderPath                             20 calls
        0 ms  AssignProjectConfiguration                 8 calls
        0 ms  Message                                   21 calls
        0 ms  MakeDir                                   10 calls
        0 ms  RemoveDuplicates                          10 calls
       16 ms  WriteLinesToFile                          10 calls
       31 ms  ReadLinesFromFile                         10 calls
       78 ms  Delete                                    11 calls
      281 ms  MSBuild                                    4 calls</pre>

It's quite easy to change the verbosity level from <a href="http://nantcontrib.sourceforge.net/release/0.85-rc4/help/tasks/msbuild.html">NAnt's MSBuild task</a>:
<pre lang="xml"><msbuild verbosity="Diagnostic" project="project\ccnet.sln">
	<property name="Configuration" value="Build" />
</msbuild>
</pre>

I was happy to see profiling information because the speed of the build in Visual Studio on our current project is making unit tests painful. Running a single unit test involves waiting for about a minute while the code compiles and ReSharper's test runner starts up. Then the test runs, generally taking less than a second. The profiling output from MSBuild seems like an ideal way to diagnose the compile speed problem. I played around with different output settings to understand what's available before tackling the build speed problem. After all, measuring something usually changes it.

One of the first things I noticed was that using the Diagnostic verbosity level very significantly slowed my build down. I decided to quantify that slow down, and check to make sure that the other verbosity levels don't suffer from a similar problem. Here are the summarized results.

<table class="data-table">
<thead>
<tr><td/><td colspan="2">total time</td><td colspan="2">std deviation</td></tr>
<tr><td class="corner">verbosity</td><td>compile</td><td>clean</td><td>compile</td><td>clean</td></tr>
</thead>
<tbody>
<tr><td>Diagnostic</td><td>88.6s</td><td>19.4s</td><td>±6.3s</td><td>±0.6s</td></tr>
<tr><td>Detailed</td><td>32.1s</td><td>5.7s</td><td>±3.8s</td><td>±0.2s</td></tr>
<tr><td>Normal</td><td>14.9s</td><td>1.1s</td><td>±1.4s</td><td>±0.03s</td></tr>
<tr><td>Minimal</td><td>13.5s</td><td>0.3s</td><td>±0.8s</td><td>±0.05s</td></tr>
<tr><td>Quiet</td><td>14.0s</td><td>0.3s</td><td>±1.4s</td><td>±0.02s</td></tr>
</tbody>
</table>

I did 5 builds at each level, and averaged the results. Since I needed to clean anyway between each test, I gathered those stats too. MSBuild provides the information in milliseconds, but I am presenting it in seconds. It seems like Normal is a reasonable setting where the output doesn't slow the build down significantly. Minimal is slightly faster, and I prefer it anyway because I find the terser output easier to follow.

To gather timings for different verbosities, I didn't use NAnt, but instead invoked <code>msbuild</code> directly from the command-line. Of the available verbosity levels, only Diagnostic gives the performance summary. Luckily, there is another switch that allows more fine-grained tuning of what appears on the console. Here are a couple of examples, but <code>msbuild /?</code> can give you more information.

<pre lang="text">C:\code\ccnet-trunk\project>msbuild ccnet.sln /verbosity:Diagnostic

C:\code\ccnet-trunk\project>msbuild ccnet.sln /target:clean /consoleloggerparameters:verbosity=normal;PerformanceSummary</pre>

Before jumping to conclusions about MSBuild's performance, I wanted to check if the slowdown is tied to using Diagnostic level at all, or just using it on the console. After all, the windows command prompt is known to be a bit of a slouch. I tried a build with Diagnostic level logging being sent to a file:

<pre lang="text">C:\code\ccnet-trunk\project>msbuild ccnet.sln /noconsolelogger /filelogger /fileloggerparameters:verbosity=Diagnostic;PerformanceSummary</pre>

With these settings, the build takes only 15.2 seconds, but still generates the full 1.5 megabytes of diagnostic logs. It seems the performance problem really lies with Windows Command Prompt. I want to try to determine if logging suffers the same penalties during a build on a continuous integration server or through Visual Studio. I have not yet discovered how to tweak the verbosity level from Visual Studio. For the CI server, I simply have not yet bothered to do the test. If there is a slowdown during CI, a simple fix may be to log all the output to a file and then include that in the build artifacts.

For now though, I'm planning on tweaking my solution structure as <a href="http://codebetter.com/blogs/patricksmacchia/archive/2009/03/15/analyzing-the-code-base-of-cruisecontrol-net.aspx">Patrick Smacchia suggests</a> to see if there is a noticeable build speed improvement.
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>52</wp:post_id>
<wp:post_date>2009-08-30 09:29:36</wp:post_date>
<wp:post_date_gmt>2009-08-29 23:29:36</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>measuring-msbuild-performance</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1251592840</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>4696</wp:comment_id>
<wp:comment_author><![CDATA[Momchil Stefanov]]></wp:comment_author>
<wp:comment_author_email>momchil@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>82.103.64.58</wp:comment_author_IP>
<wp:comment_date>2012-11-08 22:09:17</wp:comment_date>
<wp:comment_date_gmt>2012-11-08 12:09:17</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Very nice article! Thanks : )]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>sleeping in batch files</title>
<link>http://intwoplacesatonce.com/2009/11/sleeping-in-batch-files/</link>
<pubDate>Sun, 22 Nov 2009 12:48:52 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="cruisecontrol-net"><![CDATA[CruiseControl.net]]></category>
<category domain="category" nicename="automation"><![CDATA[automation]]></category>
<category domain="category" nicename="batch-files"><![CDATA[batch files]]></category>
<category domain="category" nicename="cmd-scripts"><![CDATA[cmd scripts]]></category>
<category domain="category" nicename="debugging"><![CDATA[debugging]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=73</guid>
<description></description>
<content:encoded><![CDATA[I was recently debugging a situation involving CruiseControl.net where one <a href="http://confluence.public.thoughtworks.org/display/CCNET/Executable+Task">&lt;exec&gt; task</a> would not complete until a second &lt;exec&gt; task in an unrelated project completed.

When it was originally <a href="http://groups.google.com/group/ccnet-devel/browse_thread/thread/fdbc5228726a122d">described on the mailing list</a>, I thought it might be some interaction between batch files and the parallel task in the <a href="http://ccnet.svn.sourceforge.net/viewvc/ccnet/trunk/project/core/util/ProcessExecutor.cs?revision=6352&view=markup">ProcessExecutor class</a>. ProcessExecutor encapsulates the concurrency aspect of running an external process and if there is a concurrency problem with processes, it's probably in that class.

In any case, at that point I was seriously misunderstanding the problem, but it led me to some interesting debugging. For the debugging, I wanted to create a few long running batch files to run in parallel. But what is the batch equivalent of Thread.Sleep?

The <code>pause</code> command came to mind. It has no capabilities beyond displaying a "press any key" prompt and waiting for input. No parameters or switches at all. There is no <a href="http://bashcurescancer.com/man/cmd/sleep"><code>sleep</code></a> command, as there is in bash. <code>wait</code> came to mind, but it is not a command either. I went to google...

And met <a href="http://www.velocityreviews.com/forums/t172496-bat-file-pauses.html">with success</a>. The <code>choice</code> command can be used as a timed delay. The forum I found it in made it sound as if  <code>choice</code> is not available on every platform, but my Windows Server 2003 development image has it. The exact syntax of the command does seem to vary between versions, as some example on the web do not work on my system. For me, a command to wait five seconds is

<pre lang="cmd">choice /M:"Waiting for 5 seconds" /T:5 /D:Y /C:Y</pre>

A simple one-line batch file that waits for a given number of seconds is

<pre lang="cmd">@choice /M:"Waiting for %1 seconds" /T:%1 /D:Y /C:Y</pre>

As with many command-prompt commands, you can see more information about the command including the exact syntax for your version with

<pre lang="cmd">choice /?</pre>

If you are writing a cmd or bat script and need to wait or sleep for a short time, <code>choice</code> is well, choice. ]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>73</wp:post_id>
<wp:post_date>2009-11-22 22:48:52</wp:post_date>
<wp:post_date_gmt>2009-11-22 12:48:52</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>sleeping-in-batch-files</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1258894444</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>in C# 3.5: interface + extension methods = mixin</title>
<link>http://intwoplacesatonce.com/2009/12/in-c-3-5-interface-extension-methods-mixin/</link>
<pubDate>Sun, 06 Dec 2009 01:34:21 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="c"><![CDATA[c#]]></category>
<category domain="category" nicename="duplication"><![CDATA[duplication]]></category>
<category domain="category" nicename="extension-methods"><![CDATA[extension methods]]></category>
<category domain="category" nicename="mixin"><![CDATA[mixin]]></category>
<category domain="category" nicename="partial-classes"><![CDATA[partial classes]]></category>
<category domain="category" nicename="refactoring"><![CDATA[refactoring]]></category>
<category domain="category" nicename="svcutil"><![CDATA[svcutil]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=81</guid>
<description></description>
<content:encoded><![CDATA[On my current project, we have ended up with several classes that have the same, or nearly the same fields. The classes are generated from xsds that describe a set of SOAP services that we integrate with. We have tried avoiding the generation or tweaking the xsds to avoid the situation, but accepting the duplicate classes actually seemed to be the best way forward. So, we have code in a generated file like this:

<pre lang="csharp">namespace ServiceClients.Generated
{
	public partial class Address1
	{
		public string StreetNumber { get; set; }
		public string StreetName { get; set; }
		public string Suburb { get; set; }
		public string State { get; set; }
		public string PostCode { get; set; }
	}

	public partial class Address2
	{
		public string StreetNumber { get; set; }
		public string StreetName { get; set; }
		public string Suburb { get; set; }
		public string State { get; set; }
		public string PostCode { get; set; }
	}
}</pre>

Besides the obvious problem with duplication, this code is also difficult to extend. As just one example, we wanted to display addresses in a one-line format:
<pre lang="csharp">var address = new Address1
                  {
                      StreetNumber = "12A",
                      StreetName = "Spencer Street",
                      Suburb = "Melbourne",
                      State = "VIC",
                      PostCode = "3000",
                  };
Assert.AreEqual("12A Spencer Street, Melbourne, VIC 3000",
                address.ToOneLineFormat());</pre>

The implementation for this method is fairly simple, but where can we implement it so that we will only need to write it once? Ideally what we would like is a <a href="http://en.wikipedia.org/wiki/Mixin">mixin</a>: a way of adding new methods to a class without adding any fields, and without necessarily changing the type. Although C# does not have a language facility for mixins, we can get a similar effect by using an interface and an extension method.

<pre lang="csharp">namespace ServiceClients.Generated.Extensions
{
	public interface IAddress
	{
		string StreetNumber { get; }
		string StreetName { get; }
		string Suburb { get; }
		string State { get; }
		string PostCode { get; }
	}

	public static class AddressExtensions
	{
		public static string ToOneLineFormat(this IAddress address)
		{
			const string format = "{0} {1}, {2}, {3} {4}";
			return string.Format(format,
					address.StreetNumber,
					address.StreetName,
					address.Suburb,
					address.State,
					address.PostCode);
		}
	}
}</pre>

There is one more step. In C# the two concrete types need to explicitly implement the <code>IAddress</code> interface so that we can use the <code>ToOneLineFormat</code> method on them. I've never had much use for partial classes, but they were a lifesaver in this case. In another file away from the mammoth 40,000 line long svcutil generated file, the interface can be easily added to both classes.

<pre lang="csharp">namespace ServiceClients.Generated
{
	public partial class Address1 : IAddress {}
	public partial class Address2 : IAddress {}
}</pre>

And there it is: a mixin! The ToOneLineFormat method is defined in one place, can be used with either Address class, and there is no need to change the generated code or the inheritance hierarchy.

For a time I was quite sure I had heard that methods implemented directly on interfaces would be part of C# 4. I must have been delusional though, because it is not on the list of new features. If it were, it seems it would just be syntax sugar for the above approach.
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>81</wp:post_id>
<wp:post_date>2009-12-06 11:34:21</wp:post_date>
<wp:post_date_gmt>2009-12-06 01:34:21</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>in-c-3-5-interface-extension-methods-mixin</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1260065261</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>90</wp:comment_id>
<wp:comment_author><![CDATA[John Sonmez]]></wp:comment_author>
<wp:comment_author_email>john.sonmez@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://simpleprogrammer.com</wp:comment_author_url>
<wp:comment_author_IP>164.165.35.32</wp:comment_author_IP>
<wp:comment_date>2009-12-08 01:29:07</wp:comment_date>
<wp:comment_date_gmt>2009-12-07 15:29:07</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Very nice!  I like how simple that solution is.  I am still scratching my head at classes that are almost exactly the same, but I really like your solution to the problem.  What if the classes have slightly different method names though?  Have you considering looking at an object mapper to solve that problem?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>91</wp:comment_id>
<wp:comment_author><![CDATA[DCam]]></wp:comment_author>
<wp:comment_author_email>dave.bc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://intwoplacesatonce.com</wp:comment_author_url>
<wp:comment_author_IP>115.128.2.17</wp:comment_author_IP>
<wp:comment_date>2009-12-08 08:17:01</wp:comment_date>
<wp:comment_date_gmt>2009-12-07 22:17:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[The classes are generated by svcutil to deserialize xml documents that have similar or identical structures but live in different namespaces. svcutil can't seem to handle this situation without generating multiple classes. Perhaps the same documents in different namespaces is the root of the problem, but that decision is outside of our control.

If the classes had slightly different method names an object mapper might make good sense. We don't have that problem though. A couple of teammates spiked out the use of <a href="http://www.codeplex.com/AutoMapper" rel="nofollow">AutoMapper</a>. Looking at the spikes, we decided there was enough extra code being written for special cases that AutoMapper wasn't of benefit.

We've done some of our mapping in a similar way to the examples I showed above. I might write another post about it, as it is even more surprisingly elegant.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2817</wp:comment_id>
<wp:comment_author><![CDATA[willem]]></wp:comment_author>
<wp:comment_author_email>wvandeneynde@xenit.eu</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>81.82.199.214</wp:comment_author_IP>
<wp:comment_date>2011-12-09 20:18:25</wp:comment_date>
<wp:comment_date_gmt>2011-12-09 10:18:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Nice :)]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>moving on to go, but ending up much further afield</title>
<link>http://intwoplacesatonce.com/2010/01/moving-on-to-go-but-ending-up-much-further-afield/</link>
<pubDate>Fri, 15 Jan 2010 12:51:11 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="broken-code"><![CDATA[broken code]]></category>
<category domain="category" nicename="c"><![CDATA[c#]]></category>
<category domain="category" nicename="code-on-bitbucket"><![CDATA[code on bitbucket]]></category>
<category domain="category" nicename="composition-over-inheritance"><![CDATA[composition over inheritance]]></category>
<category domain="category" nicename="duplication"><![CDATA[duplication]]></category>
<category domain="category" nicename="go"><![CDATA[go]]></category>
<category domain="category" nicename="refactoring"><![CDATA[refactoring]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=90</guid>
<description></description>
<content:encoded><![CDATA[While I was preparing my last blog post about mixins in C#, I was also reading about go. From looking at go's syntax, I thought I would be able to replace the C# code one-for-one with go code and end up with a valid program. I thought <a href="http://bitbucket.org/davcamer/csharp_to_go/changeset/cd1b05edfddb/">this would be the code</a>:

<pre lang="none">// Not actually valid go!

package main

import "fmt"

type IAddress interface {
	StreetNumber string;
	StreetName string;
}
func (a IAddress) ToOneLineFormat() string {
	return a.StreetNumber() + " " + a.StreetName()
}

type Address1 struct {
	StreetNumber, StreetName string
}
type Address2 struct {
	StreetNumber, StreetName string
}

func main() {
	address1 := &Address1{"12A", "Spencer Street"};
	fmt.Println(address1.ToOneLineFormat());

	address2 := &Address2{"12A", "Spencer Street"};
	fmt.Println(address2.ToOneLineFormat())
}</pre>

I liked this code. It's slightly more lightweight than the equivalent C# because the interfaces don't need to be explicitly declared on the implementing classes. Otherwise it's quite similar. Declaring funcs away from types seemed a natural analogue to the interface + extension methods approach I described in the last post.

But this is not valid go code. Why not?

The first point is, that I've confused C#'s concept of properties with both fields and methods in my go code. The declarations in the structs can remain as fields, but the declarations in the interface must <a href="http://bitbucket.org/davcamer/csharp_to_go/changeset/38a29a5faf45/">change to be methods</a>. My interface needs to be:

<pre lang="none">type IAddress interface {
	StreetNumber() string;
	StreetName() string;
}</pre>

Now, to conform to the interface the two Address types need to have <a href="http://bitbucket.org/davcamer/csharp_to_go/changeset/512eecb12230/">methods that correspond to the interface</a>. Not fields.

<pre lang="none">type Address1 struct {
	streetNumber, streetName string
}
func (a Address1) StreetNumber() { return a.streetNumber }
func (a Address1) StreetName() { return a.streetName }
type Address2 struct {
	streetNumber, streetName string
}
func (a Address2) StreetNumber() { return a.streetNumber }
func (a Address2) StreetName() { return a.streetName }</pre>

Address1 and Address2 now both conform to the IAddress interface, though at the price of duplicate property/accessor/getter code. Accessors like this aren't particularly idiomatic for go, so there is no syntactic sugar to support them. Members are intended to either be fields, possibly public, or methods implementing significant behaviour.

The next problem arises because in go methods cannot be defined on interfaces. The syntax would seem to allow it, but it is simply illegal. The receive of a method must be a pointer to a named type or a named type itself. No interfaces. And also none of the familiar basic types like int, float and so on because they are unnamed types. A particular named type that aliases a basic type can have methods defined on it however. Coming back to this experiment, ToOneLineFormat needs to <a href="http://bitbucket.org/davcamer/csharp_to_go/changeset/c364216640fc/">have a concrete receiver</a>:

<pre lang="none">func (a Address1) ToOneLineFormat() string {
	return a.StreetNumber() + " " + a.StreetName()
}
func (a Address2) ToOneLineFormat() string {
	return a.StreetNumber() + " " + a.StreetName()
}</pre>

At this point I have brought back all the duplication that I was hoping to eliminate. On the up side, I have working go code.

Go has its own mechanism to reduce duplication. Its based on composing new types from existing types. A type can have an unnamed field of another type. The properties of the second, contained type can be accessed as if they were properties of the containing type. Address1 and Address2 could be <a href="http://bitbucket.org/davcamer/csharp_to_go/changeset/34e541d9a3cf/">defined in terms of</a> a BaseAddress type.

<pre lang="none">type BaseAddress struct {
	streetNumber, streetName string
}
type Address1 struct {
	BaseAddress
}
type Address2 struct {
	BaseAddress
}</pre>

These new versions of Address1 and 2 will have exactly the same fields as the old type. An object composed like this can also receive methods as if it were an object of the anonymous field's type. This allows us to move the  ToOneLineFormat method on to BaseAddress directly. Also, since StreetNumber() and StreetName() simply return the value of fields which are available on BaseAddress, we can remove them. This in turn means IAddress is no longer useful. The complete code for Address1 and Address2 is significantly more compact. Note that the initialisation expression does need to change now, to recognise the anonymous BaseAddress field.

<pre lang="none">type BaseAddress struct {
	streetNumber, streetName string
}
func (BaseAddress a) ToOneLineFormat() {
	return a.streetNumber + " " + a.streetName
}
type Address1 struct {
	BaseAddress
}
type Address2 struct {
	BaseAddress
}

func main() {
	address1 := &Address1{BaseAddress{"12A", "Spencer Street", "Melbourne", "VIC", "3000"}};
	fmt.Println(address1.ToOneLineFormat());

	address2 := &Address2{BaseAddress{"12A", "Spencer Street", "Melbourne", "VIC", "3000"}};
	fmt.Println(address2.ToOneLineFormat())
}</pre>

Address1 and Address2 themselves are looking redundant now. Having a BaseAddress with two classes that "inherit" from it seems to clash strongly with the ideas of go. Based on this exercise, I believe an anonymous field still needs to capture some freestanding meaning of its own. The two types are a somewhat artificial constraint anyway. I'll leave them here, as they were the two classes that motivated this experiment originally.

Hopefully in go, you won't often end up in the same situation we faced in C#, needing two structurally identical types.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>90</wp:post_id>
<wp:post_date>2010-01-15 22:51:11</wp:post_date>
<wp:post_date_gmt>2010-01-15 12:51:11</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>moving-on-to-go-but-ending-up-much-further-afield</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
	</item>
<item>
<title>01_initial_settings.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=96</link>
<pubDate>Wed, 27 Jan 2010 12:24:24 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2010/01/01_initial_settings.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>96</wp:post_id>
<wp:post_date>2010-01-27 22:24:24</wp:post_date>
<wp:post_date_gmt>2010-01-27 12:24:24</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>01_initial_settings-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2010/01/01_initial_settings.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2010/01/01_initial_settings.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"466";s:6:"height";s:3:"448";s:14:"hwstring_small";s:22:"height='96' width='99'";s:4:"file";s:31:"2010/01/01_initial_settings.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"01_initial_settings-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"01_initial_settings-300x288.png";s:5:"width";s:3:"300";s:6:"height";s:3:"288";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>02_RDC_connection_localhost.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=97</link>
<pubDate>Wed, 27 Jan 2010 12:24:46 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2010/01/02_RDC_connection_localhost.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>97</wp:post_id>
<wp:post_date>2010-01-27 22:24:46</wp:post_date>
<wp:post_date_gmt>2010-01-27 12:24:46</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>02_rdc_connection_localhost-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2010/01/02_RDC_connection_localhost.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2010/01/02_RDC_connection_localhost.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"421";s:6:"height";s:3:"259";s:14:"hwstring_small";s:23:"height='78' width='128'";s:4:"file";s:39:"2010/01/02_RDC_connection_localhost.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:39:"02_RDC_connection_localhost-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:39:"02_RDC_connection_localhost-300x184.png";s:5:"width";s:3:"300";s:6:"height";s:3:"184";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>03_revised_settings.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=98</link>
<pubDate>Wed, 27 Jan 2010 12:25:13 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2010/01/03_revised_settings.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>98</wp:post_id>
<wp:post_date>2010-01-27 22:25:13</wp:post_date>
<wp:post_date_gmt>2010-01-27 12:25:13</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>03_revised_settings-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2010/01/03_revised_settings.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2010/01/03_revised_settings.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"466";s:6:"height";s:3:"448";s:14:"hwstring_small";s:22:"height='96' width='99'";s:4:"file";s:31:"2010/01/03_revised_settings.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"03_revised_settings-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"03_revised_settings-300x288.png";s:5:"width";s:3:"300";s:6:"height";s:3:"288";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>04_RDC_connection_127_0_0_2.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=99</link>
<pubDate>Wed, 27 Jan 2010 12:25:46 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2010/01/04_RDC_connection_127_0_0_2.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>99</wp:post_id>
<wp:post_date>2010-01-27 22:25:46</wp:post_date>
<wp:post_date_gmt>2010-01-27 12:25:46</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>04_rdc_connection_127_0_0_2-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2010/01/04_RDC_connection_127_0_0_2.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2010/01/04_RDC_connection_127_0_0_2.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"421";s:6:"height";s:3:"259";s:14:"hwstring_small";s:23:"height='78' width='128'";s:4:"file";s:39:"2010/01/04_RDC_connection_127_0_0_2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:39:"04_RDC_connection_127_0_0_2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:39:"04_RDC_connection_127_0_0_2-300x184.png";s:5:"width";s:3:"300";s:6:"height";s:3:"184";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>04_RDC_connection_127_0_0_2.png</title>
<link>http://intwoplacesatonce.com/?attachment_id=100</link>
<pubDate>Wed, 27 Jan 2010 12:32:08 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2010/01/04_RDC_connection_127_0_0_21.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>100</wp:post_id>
<wp:post_date>2010-01-27 22:32:08</wp:post_date>
<wp:post_date_gmt>2010-01-27 12:32:08</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>04_rdc_connection_127_0_0_2-png-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2010/01/04_RDC_connection_127_0_0_21.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2010/01/04_RDC_connection_127_0_0_21.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"421";s:6:"height";s:3:"259";s:14:"hwstring_small";s:23:"height='78' width='128'";s:4:"file";s:40:"2010/01/04_RDC_connection_127_0_0_21.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:40:"04_RDC_connection_127_0_0_21-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:40:"04_RDC_connection_127_0_0_21-300x184.png";s:5:"width";s:3:"300";s:6:"height";s:3:"184";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>remote desktop connection to localhost: a regression in Windows 7?</title>
<link>http://intwoplacesatonce.com/2010/01/remote-desktop-connection-to-localhost-a-regression-in-windows-7/</link>
<pubDate>Wed, 27 Jan 2010 12:57:16 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="putty"><![CDATA[putty]]></category>
<category domain="category" nicename="rdc"><![CDATA[rdc]]></category>
<category domain="category" nicename="remote-desktop-connection"><![CDATA[remote desktop connection]]></category>
<category domain="category" nicename="ssh"><![CDATA[ssh]]></category>
<category domain="category" nicename="ssh-tunnel"><![CDATA[ssh tunnel]]></category>
<category domain="category" nicename="tcpip"><![CDATA[tcpip]]></category>
<category domain="category" nicename="win7"><![CDATA[win7]]></category>
<category domain="category" nicename="windows"><![CDATA[windows]]></category>
<category domain="category" nicename="winxp"><![CDATA[winxp]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=101</guid>
<description></description>
<content:encoded><![CDATA[I maintain a Windows server. It is web-facing, and lives in a DMZ on the other side of the world from me. I have to install new programs every now and then. Windows being Windows, it's easiest to do this with a desktop session. Remote Desktop Connection is the key tool for doing this. Since the version of Remote Desktop Protocol (RDP) I'm connecting to <a href="http://en.wikipedia.org/wiki/Remote_Desktop_Protocol">isn't secure</a> over the public Internet I use an <a href="http://en.wikipedia.org/wiki/Ssh_tunnel#SSH_tunneling">ssh tunnel</a> to connect. This is easy to <a href="http://oldsite.precedence.co.uk/nc/putty.html">set-up in Putty</a>.

<img src="http://intwoplacesatonce.com/wp-content/uploads/2010/01/01_initial_settings.png" alt="01_initial_settings.png" border="0" width="466" height="448" />

An ssh tunnel works by accepting packets on one side of the ssh connection, and putting them back in to the TCP/IP stack on the other side of the tunnel -- as if the packets originated from the "far" computer. This can be done in either direction. In the screenshot above I've configured a tunnel accepting packets on my local machine. They will be re-injected on the remote machines stack addressed to "localhost:3389". In other words a program connecting to my computer's port 3390 will actually connect to the remote computer's port 3389. Port 3389 is Remote Desktop Protocol, so if I point RDC at localhost:3390, I'll connect to the remote computer's RDP server.

<img src="http://intwoplacesatonce.com/wp-content/uploads/2010/01/02_RDC_connection_localhost.png" alt="02_RDC_connection_localhost.png" border="0" width="421" height="259" />

I recently started using Windows 7 and this set up broke. It seems in Windows 7, Remote Desktop Connection prevents connections to localhost. Trying to work around the limit using 127.0.0.1 or your public IP address or computer name does not work either. RDC still recognises that you are, apparently, connecting to the computer you are already connected to. This is an awkward limitation when using an ssh tunnel or some other connection forwarding.

Luckily there is a workaround.

Apparently Windows XP before service pack 2 had <a href="http://www.bitvise.com/remote-desktop">this same limitation</a>. People worked around it by pointing RDC at 127.0.0.2. It's not used that often, but the whole range of addresses starting with 127 are all routed back to the local machine. In other words you always <a href="http://en.wikipedia.org/wiki/Localhost#IPv4">have a /8 network</a> running on your own machine. To make this work, I had to check the "Local ports accept connections from other hosts" option for putty. Without the option putty will only listen for connections to address 127.0.0.1. With the option it accepts connections on any address. Now I can point RDC at 127.0.0.2:3390 and get connected to the remote desktop, securely.

<img src="http://intwoplacesatonce.com/wp-content/uploads/2010/01/03_revised_settings.png" alt="03_revised_settings.png" border="0" width="466" height="448" />

It seems a strange limitation for RDC to refuse to connect to localhost. I can understand the initial idea; having this limit would prevent remoting to a computer you are already remoted to. That's an easy enough mistake to make if you are managing several servers, and it's a nice save. The strange bit is that someone repealed the limit in XP SP2, but now it is back again. How does that happen? Was SP2 on a branch, and they forgot to merge it back? Was the limit in the original spec, and the spec didn't get updated when the limitation was removed? Did they just decide the limit feature was back in? As someone stung by the reintroduction of the feature, it feels like an accidental regression.

<img src="http://intwoplacesatonce.com/wp-content/uploads/2010/01/04_RDC_connection_127_0_0_21.png" alt="04_RDC_connection_127_0_0_2.png" border="0" width="421" height="259" />]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>101</wp:post_id>
<wp:post_date>2010-01-27 22:57:16</wp:post_date>
<wp:post_date_gmt>2010-01-27 12:57:16</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>remote-desktop-connection-to-localhost-a-regression-in-windows-7</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:comment>
<wp:comment_id>237</wp:comment_id>
<wp:comment_author><![CDATA[tender]]></wp:comment_author>
<wp:comment_author_email>admin@theendofsilicon.info</wp:comment_author_email>
<wp:comment_author_url>http://theendofsilicon.info</wp:comment_author_url>
<wp:comment_author_IP>217.57.142.98</wp:comment_author_IP>
<wp:comment_date>2010-05-27 02:37:14</wp:comment_date>
<wp:comment_date_gmt>2010-05-26 16:37:14</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thank you.
Your post helped me to use RD with the mess of windows versions and behaviors (7 ultimate x64 in this case).]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>217</wp:comment_id>
<wp:comment_author><![CDATA[Mario Gluščić]]></wp:comment_author>
<wp:comment_author_email>forman.snow@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.magnumx.hr</wp:comment_author_url>
<wp:comment_author_IP>93.139.86.127</wp:comment_author_IP>
<wp:comment_date>2010-04-28 01:02:14</wp:comment_date>
<wp:comment_date_gmt>2010-04-27 15:02:14</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thank you so much.
On Windows 7 Ultimate this is true, you must have these settings you've mentioned (that's OS on my desktop computer), but it actually works with localhost:3389 on my laptop (HP DV7) with Windows 7 Home Premium, both 64-bit. No idea why is like that. But even so, you really helped me and I thank you very much.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>292</wp:comment_id>
<wp:comment_author><![CDATA[Mitch N]]></wp:comment_author>
<wp:comment_author_email>mitchn@mitchn.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>98.207.16.176</wp:comment_author_IP>
<wp:comment_date>2010-07-09 13:48:49</wp:comment_date>
<wp:comment_date_gmt>2010-07-09 03:48:49</wp:comment_date_gmt>
<wp:comment_content><![CDATA[It appears you can also do this in putty by making your *source* port be 127.0.0.2:3390, which will get putty to listen on the alternate port.  That worked for me without requiring me to allow everyone on the local subnet to access my tunnel.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>454</wp:comment_id>
<wp:comment_author><![CDATA[Apo]]></wp:comment_author>
<wp:comment_author_email>ak-privat@web.de</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>153.96.1.16</wp:comment_author_IP>
<wp:comment_date>2010-10-22 15:47:47</wp:comment_date>
<wp:comment_date_gmt>2010-10-22 05:47:47</wp:comment_date_gmt>
<wp:comment_content><![CDATA[i found out, that if you use port 3391 instead of 3390...it will work without any changes in putty!

just a port issue!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>1224</wp:comment_id>
<wp:comment_author><![CDATA[Fred]]></wp:comment_author>
<wp:comment_author_email>fred@fred.net</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>66.194.94.4</wp:comment_author_IP>
<wp:comment_date>2011-03-30 05:13:44</wp:comment_date>
<wp:comment_date_gmt>2011-03-29 19:13:44</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thank you!  Very helpful indeed.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>575</wp:comment_id>
<wp:comment_author><![CDATA[John R]]></wp:comment_author>
<wp:comment_author_email>johnrissone@yahoo.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>99.88.180.7</wp:comment_author_IP>
<wp:comment_date>2010-11-25 13:25:15</wp:comment_date>
<wp:comment_date_gmt>2010-11-25 03:25:15</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Thanks for sharing! Nice to see I wasn't the only one having this problem and happy you took the time to post the solution. Great job!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2024</wp:comment_id>
<wp:comment_author><![CDATA[Eric]]></wp:comment_author>
<wp:comment_author_email>eric.j.ng@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>121.44.162.58</wp:comment_author_IP>
<wp:comment_date>2011-07-18 23:25:25</wp:comment_date>
<wp:comment_date_gmt>2011-07-18 13:25:25</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Confirming, you do not need to enable "Local ports accept connections from other hosts". Just change the IP as above to 127.0.0.2 and continue to use as normal.

Very happy, thanks for this!]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>multiple return values and refactoring javascript</title>
<link>http://intwoplacesatonce.com/2010/04/multiple-return-values-and-refactoring-javascript/</link>
<pubDate>Wed, 28 Apr 2010 05:57:44 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="dynamic"><![CDATA[dynamic]]></category>
<category domain="category" nicename="gmaps"><![CDATA[gmaps]]></category>
<category domain="category" nicename="google-maps"><![CDATA[google maps]]></category>
<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
<category domain="category" nicename="refactoring"><![CDATA[refactoring]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=103</guid>
<description></description>
<content:encoded><![CDATA[I've been working on an entry for Victoria's AppMyState competition. Although I started by doing some javascript and some Ruby on Rails, the RoR part quickly became superfluous and I ended up writing a purely javascript app. It's a mash-up of Google Maps, Google's geocoding and hopefully some Street View too, so javascript is a good fit. There's also a python script to massage the government data in to a useable form, but that's behind the scenes.

The data I'm displaying is divided in to 11 categories and I want to treat each category separately, so I was ending up with repetitive code.

<pre lang="javascript">var horseTroughMgr = new MarkerManager(map);
var horseTroughMarkers = [];
var i = Horse_Trough.length;
while (i--) {
  var trough = Horse_Trough[i];
  var point = new GLatLng(trough.latitude, trough.longitude);
  var marker = createMarker(point,'<h4>' + trough.category + '</h4>');
  horseTroughMarkers.push(marker);
  horseTroughMgr.addMarker(marker, 0);
}
horseTroughMgr.refresh();

var litterBinMgr = new MarkerManager(map);
var i = Litter_Bin.length;
while (i--) {
  var bin = Litter_Bin[i];
  var point = new GLatLng(bin.latitude, bin.longitude);
  var marker = createMarker(point,'<h4>' + bin.category + '</h4>');
  litterBinMgr.addMarker(marker, 19);
}
litterBinMgr.refresh();

var hoopMgr = new MarkerManager(map);
var i = Hoop.length;
while (i--) {
  var hoop = Hoop[i];
  var point = new GLatLng(hoop.latitude, hoop.longitude);
  var marker = createMarker(point,'<h4>' + hoop.category + '</h4>');
  hoopMgr.addMarker(marker, 15);
}
hoopMgr.refresh();</pre>

... and 8 more similar blocks.

The first block has an extra list of markers, and I wanted to add that to the other blocks. I also had an intuition that I didn't need both the list and the manager. I was holding back because I wasn't sure, and with the duplication I didn't feel that confident about refactoring. Then I remembered I could have two return values, and things started getting easy:

<pre lang="javascript">function setupCategory(map, data, minZoom) {
  var mgr = new MarkerManager(map);
  var list = [];

  var i = data.length;
  while (i--) {
    var item = data[i];
    var point = new GLatLng(item.latitude, item.longitude);
    var marker = createMarker(point,'<h4>' + item.category + '</h4>');
    list.push(marker);
    mgr.addMarker(marker, minZoom);
  }
  mgr.refresh();
  return { manager: mgr, list: list };
}


function initialize() {
  var map = new GMap2(document.getElementById("map"));
  map.setCenter(new GLatLng(-37.8062649904, 144.96165842), 10);
  map.setUIToDefault();

  var trough = setupCategory(map, Horse_Trough, 0);
  var bin = setupCategory(map, Litter_Bin, 19);
  var hoop = setupCategory(map, Hoop, 15);</pre>

Having it in this form made it <b>very</b> easy to figure out that I didn't need the manager returned from setupCategory(), and I could only return the list. And because it was only in one place, it was easy to change.

This progression works well for me when I'm refactoring: eliminate the duplication, which makes it easier to see a way to simplify the code. Sometimes simplifying the code exposes more duplication and it turns in to a cycle, but not always. I'm often tempted to try to do this in two steps, but that usually ends up in trouble where I'm making mistakes, breaking things, and then hacking them back together.

Javascript's object literals made it easy to return two values which is what I needed here. In C# I would have needed a new class or some anonymous class and reflection. (Or maybe the dynamic keyword in C#4?) It is higher friction in static languages. This must be the reduced friction dynamic language enthusiasts brag about!

I should note that this seems not to be the best way to handle markers in many categories. It's better to have a manager per-category. ]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>103</wp:post_id>
<wp:post_date>2010-04-28 15:57:44</wp:post_date>
<wp:post_date_gmt>2010-04-28 05:57:44</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>multiple-return-values-and-refactoring-javascript</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1284406877</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>219</wp:comment_id>
<wp:comment_author><![CDATA[Mark Needham]]></wp:comment_author>
<wp:comment_author_email>m.h.needham@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.markhneedham.com/blog</wp:comment_author_url>
<wp:comment_author_IP>217.113.173.242</wp:comment_author_IP>
<wp:comment_date>2010-04-29 09:09:54</wp:comment_date>
<wp:comment_date_gmt>2010-04-28 23:09:54</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Another thing you seem to have done quite well with this example is to not try and pull out the duplication too early but to instead let it stay there until a more obvious pattern of duplication emerges.

Pulling the duplication out too early as you point out seems to make the code way less 'malleable' and it's then much more difficult to drive it to where you want to go.

Interesting post though, good stuff.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>221</wp:comment_id>
<wp:comment_author><![CDATA[Coding: Generalising too early at Mark Needham]]></wp:comment_author>
<wp:comment_author_email></wp:comment_author_email>
<wp:comment_author_url>http://www.markhneedham.com/blog/2010/04/30/coding-generalising-too-early/</wp:comment_author_url>
<wp:comment_author_IP>194.154.164.100</wp:comment_author_IP>
<wp:comment_date>2010-04-30 17:13:20</wp:comment_date>
<wp:comment_date_gmt>2010-04-30 07:13:20</wp:comment_date_gmt>
<wp:comment_content><![CDATA[[...] Cameron, who first taught me this approach, recently wrote a post describing how he removed some duplication in JavaScript code and you can see from the initial example in his post that he waited until he was exactly sure [...] ]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type>pingback</wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>220</wp:comment_id>
<wp:comment_author><![CDATA[DCam]]></wp:comment_author>
<wp:comment_author_email>dave.bc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://intwoplacesatonce.com</wp:comment_author_url>
<wp:comment_author_IP>115.130.20.6</wp:comment_author_IP>
<wp:comment_date>2010-04-29 12:33:06</wp:comment_date>
<wp:comment_date_gmt>2010-04-29 02:33:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[That's very true! I think I'm pretty deep in to a habit of only removing duplication once I have at least about 3 example of it in front of me. It's a bit more typing up front, but typing is not the bottleneck in software development. Or so I've heard.

Once I do get around to eliminating the duplication, it's usually a single regex to get all the call sites sorted out. I think that micro-automation makes the approach efficient enough to be viable. Not to mention the efficiency of getting the code done well.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>219</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>objective-c test doubles on the cheap with brutal cast</title>
<link>http://intwoplacesatonce.com/2010/09/objective-c-test-doubles-on-the-cheap-with-brutal-cast/</link>
<pubDate>Mon, 13 Sep 2010 06:56:39 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="brutal-cast"><![CDATA[brutal cast]]></category>
<category domain="category" nicename="casting"><![CDATA[casting]]></category>
<category domain="category" nicename="dispatch"><![CDATA[dispatch]]></category>
<category domain="category" nicename="dynamic"><![CDATA[dynamic]]></category>
<category domain="category" nicename="interactionist"><![CDATA[interactionist]]></category>
<category domain="category" nicename="message"><![CDATA[message]]></category>
<category domain="category" nicename="objective-c"><![CDATA[objective-c]]></category>
<category domain="category" nicename="test-doubles"><![CDATA[test doubles]]></category>
<category domain="category" nicename="testing"><![CDATA[testing]]></category>
<category domain="category" nicename="unit-tests"><![CDATA[unit tests]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=113</guid>
<description></description>
<content:encoded><![CDATA[Objective-C has the power of Ruby, with duck-typing and dynamic dispatch in the object layer. At the same time it has the power of C, with direct access to memory layouts and static-weak typing below the object layer. Sometimes, the two powers can be combined for some unexpected results.

On my current project we are trying to unit test as much functionality as we reasonably can. I am quite happy to write interactionist tests, so I need test doubles. Although the Objective-C compiler does static type checking at compile time, at run-time Objective-C objects will respond to any message for which they have a method defined.

This makes creating test doubles very easy. Consider a controller that accepts an error delegated from a CLLocationManager, and delegates it on to a logging class. Fragments of the classes involved might look like this:
<pre lang="objective-c">@interface Logger : NSObject

- (void)log:(NSError *)error;

@end

@interface LocationSensitiveController <CLLocationManagerDelegate> : NSObject

- (id)initWithLogger:(Logger *)logger;
- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error;

@end</pre>

In my test I would like to use a test double in place of the logger, and assert that the same error gets passed along:
<pre lang="objective-c">- (void)testShouldPassErrorToLogger;
{
  Logger *stubLogger = // how to create the stub logger?
  LocationSensitiveController *controller = [[[LocationSensitiveController alloc] initWithLogger:stubLogger] autorelease];
</pre>

The stub logger need only understand the log: message to serve its purpose. It does not need to have any relationship to the Logger class. I've been calling these classes "Pretend..." because the class is only pretending to be the other type. They would be stubs in the <a href="http://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs">Test Double taxonomy</a> that Martin Fowler popularised.
<pre lang="objective-c">@interface PretendLogger : NSObject

- (void)log:(NSError *)error;
- (NSError *)receivedError;

@end</pre>

The compiler will reject a straight assignment:
<pre lang="objective-c">  Logger *stubLogger = [[[PretendLogger alloc] init] autorelease]; // type error</pre>

The low-level C power can be used to convince the compiler otherwise:
<pre lang="objective-c">  Logger *stubLogger = (Logger *)[[[PretendLogger alloc] init] autorelease];</pre>

In C this type of cast is sometimes called a brutal cast. The cast tells the compiler to interpret the same area of memory as a different type. All Objective-C classes share the same basic memory layout, so in the example the cast "sneaks" the PretendLogger past the compile-time static checking and in to the LocationSensitiveController instance. There it will receive messages intended for Logger, and because it implements a method for the same selector (log:), the code will run successfully.

Using a cast, I can write the test using my PretendLogger class:
<pre lang="objective-c">@implementation LocationSensitiveControllerTest

- (void)testShouldPassErrorToLogger;
{
  Logger *stubLogger = [[[PretendLogger alloc] init] autorelease];
  LocationSensitiveController *controller = [[[LocationSensitiveController alloc] initWithLogger:stubLogger] autorelease];
  NSError *expectedError = [NSError errorWithDomain:@"domain string" code:666 userInfo:nil];

  [controller locationManager:nil didFailWithError:expectedError];

  NSError *actualError = [(PretendLogger *)stubLogger receivedError];
  GHAssertEquals(expectedError, actualError, @"error should be received by logger");
}

@end</pre>

Eventually a <a href="http://www.mulle-kybernetik.com/software/OCMock/">mocking framework</a> makes sense, or real classes can be used with <a href="http://www.cocoadev.com/index.pl?MethodSwizzling">method swizzling</a>. When getting started on a project or a new area of code, this is a very simple approach to get some interaction tests going.

I've posted a complete xcode project incorporating the example test to <a href="http://github.com/davcamer/cheap_objc_mocks">github</a>.
]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>113</wp:post_id>
<wp:post_date>2010-09-13 16:56:39</wp:post_date>
<wp:post_date_gmt>2010-09-13 06:56:39</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>objective-c-test-doubles-on-the-cheap-with-brutal-cast</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1284387572</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>493</wp:comment_id>
<wp:comment_author><![CDATA[Giles]]></wp:comment_author>
<wp:comment_author_email>giles.alexander@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://overwatering.org</wp:comment_author_url>
<wp:comment_author_IP>124.149.124.194</wp:comment_author_IP>
<wp:comment_date>2010-11-03 23:19:06</wp:comment_date>
<wp:comment_date_gmt>2010-11-03 13:19:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Personally, I try to avoid casts wherever possible. The C syntax for them is really hard to search for if you ever decide to change something. In this case you can use the Obj-C id type to avoid the need for the cast:

id stubLogger = [[[PretendLogger alloc] init] autorelease];

id can be used as a reference to any Obj-C type, and can be used wherever any Obj-C type is required.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>496</wp:comment_id>
<wp:comment_author><![CDATA[DCam]]></wp:comment_author>
<wp:comment_author_email>dave.bc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://intwoplacesatonce.com</wp:comment_author_url>
<wp:comment_author_IP>199.172.169.86</wp:comment_author_IP>
<wp:comment_date>2010-11-06 00:09:01</wp:comment_date>
<wp:comment_date_gmt>2010-11-05 14:09:01</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I like the "id" syntax. It is much cleaner than using a cast.

Unfortunately, the code base I was using this on was configured so that any use of id was a compile time error. We had to use casts there. On other code bases I'll use id.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>359</wp:comment_id>
<wp:comment_author><![CDATA[Stew]]></wp:comment_author>
<wp:comment_author_email>sgleadow@thoughtworks.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>202.146.7.239</wp:comment_author_IP>
<wp:comment_date>2010-09-15 09:57:41</wp:comment_date>
<wp:comment_date_gmt>2010-09-14 23:57:41</wp:comment_date_gmt>
<wp:comment_content><![CDATA[I noticed you injected the Logger dependency in the init method of the class under test. I think that definitely makes life a bit easier, regardless of whether you're using OCMock or pretend test doubles.

If you don't inject the Logger class, it seems to get a bit harder to swizzle the pretend method into the class under test unless you use some sort of Objective C DIC (are there any good ones?)

ie. if the method was more like:

<pre>
- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error;
{
  Logger *logger = [[[Logger alloc] init] autorelease];
  [logger log:error];
}
</pre>

Method swizzling doesn't buy you much because alloc/init are called together, and swizzling alloc sounds evil! Perhaps simple constructor-based dependency injection like you're showing is the best way around this.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>360</wp:comment_id>
<wp:comment_author><![CDATA[DCam]]></wp:comment_author>
<wp:comment_author_email>dave.bc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://intwoplacesatonce.com</wp:comment_author_url>
<wp:comment_author_IP>211.26.244.74</wp:comment_author_IP>
<wp:comment_date>2010-09-16 15:41:37</wp:comment_date>
<wp:comment_date_gmt>2010-09-16 05:41:37</wp:comment_date_gmt>
<wp:comment_content><![CDATA[While writing the blog I drafted a bunch of code in the post and then later stitched it together in XCode to make sure it all worked. I originally had a setLogger: method on the controller, but while implementing it seemed more natural to pass it to init. It works well enough that way.

I hadn't thought about alloc'ing it directly in the method. It doesn't seem to make sense for a logger, but I know it has come up in other contexts.

I still like dependency injection and don't see a problem with it in obj-c. A container is not necessary after all.

New motto: "Stop spreading the [alloc]s!"]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>restoring recovered files identity</title>
<link>http://intwoplacesatonce.com/2010/10/restoring-recovered-files-identity/</link>
<pubDate>Sat, 16 Oct 2010 05:08:43 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="bash"><![CDATA[bash]]></category>
<category domain="category" nicename="fat32"><![CDATA[fat32]]></category>
<category domain="category" nicename="recovery"><![CDATA[recovery]]></category>
<category domain="category" nicename="unix"><![CDATA[unix]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=118</guid>
<description></description>
<content:encoded><![CDATA[I have a couple of one terabyte external hard drives. When I first got them I formatted them with FAT32 so that I could read and write them from both Windows and OS X.

FAT32 is not a <a href="http://en.wikipedia.org/wiki/Journaling_file_system">journaling filesystem</a>, which means if a write operation is interrupted the drive can end up in an inconsistent state. Within the first month of using the drive, I corrupted the filesystem. I forget exactly what happened: did I knock the power cord out? forget to eject the drive?

Luckily when this happens to a FAT32 disk the files can be recovered. Unfortunately, the filenames are lost. You get a folder called <code>FOUND.000</code> with files named <code>FILE0000.CHK</code> up to, in my case, <code>FILE0820.CHK</code>. The extension on filenames is important on Windows and on OS X as well because Finder relies on it.

Unix-like systems come with a utility, called <code>file</code>, that can determine file types by examining the contents. When I first read about file it was described as checking the <a href="http://en.wikipedia.org/wiki/File_format#Magic_number">first 2-bytes</a>, called the magic number or magic cookie. More modern versions must check more of the file, because they offer more information than can be contained in 2-bytes.

<pre lang="bash">➜ {ninja} FOUND.000 $ file *.CHK
FILE0004.CHK: RIFF (little-endian) data, AVI, 628 x 254, 25.00 fps, video: DivX 5, audio: MPEG-1 Layer 3 (stereo, 48000 Hz)
FILE0007.CHK: RIFF (little-endian) data, AVI, 580 x 306, 23.98 fps, video: DivX 5, audio: MPEG-1 Layer 3 (stereo, 48000 Hz)
FILE0009.CHK: RIFF (little-endian) data, AVI, 576 x 320, 23.98 fps, video: XviD, audio: MPEG-1 Layer 3 (stereo, 48000 Hz)
FILE0013.CHK: RIFF (little-endian) data, AVI, 612 x 250, 23.98 fps, video: DivX 5, audio: MPEG-1 Layer 3 (stereo, 48000 Hz)
FILE0016.CHK: RIFF (little-endian) data, AVI, 592 x 320, 25.00 fps, video: XviD, audio: MPEG-1 Layer 3 (stereo, 48000 Hz)
FILE0019.CHK: RIFF (little-endian) data, AVI, 608 x 288, 25.00 fps, video: XviD, audio: MPEG-1 Layer 3 (stereo, 48000 Hz)
FILE0022.CHK: RIFF (little-endian) data, AVI, 640 x 272, 23.98 fps, video: XviD, audio: MPEG-1 Layer 3 (stereo, 44100 Hz)
FILE0026.CHK: PNG image, 640 x 272, 8-bit/color RGB, non-interlaced
FILE0027.CHK: PC bitmap, Windows 3.x format, 640 x 272 x 32
FILE0028.CHK: PNG image, 640 x 272, 8-bit/color RGB, non-interlaced</pre>

I wanted to at least check what the contents of my FOUND files were before deleting them. I needed to get the appropriate extensions back on the filenames so that finder and other tools would work with them properly. I thought I should be able to do it completely in the shell, and best of all, it's already a REPL!

First step was to sort them by type.
<pre lang="bash">➜ {ninja} FOUND.000 $ file *.CHK | grep PNG
FILE0026.CHK: PNG image, 640 x 272, 8-bit/color RGB, non-interlaced
FILE0028.CHK: PNG image, 640 x 272, 8-bit/color RGB, non-interlaced</pre>

Next I needed the filename by cutting the first 8 characters. I did not know about <code>cut</code> before but I've certainly needed to pull a section out of a line before. I expect I'll be using it again.
<pre lang="bash">➜ {ninja} FOUND.000 $ file *.CHK | grep PNG | cut -c 1-8
FILE0026
FILE0028</pre>

I needed to turn these lines in to separate <code>mv</code> commands and <code>xargs</code> does exactly that. I had not used <code>xargs</code> beyond entirely simple commands before but the <code>man</code> page was enough to get me started. Since I was about to move files without a safety net, I wanted to do a quick test first.
<pre lang="bash">➜ {ninja} FOUND.000 $ file *.CHK | grep PNG | cut -c 1-8 | xargs -I filename echo filename.CHK filename.png
FILE0026.CHK FILE0026.png
FILE0028.CHK FILE0028.png</pre>

Looked good, so it was time for the real command.
<pre lang="bash">➜ {ninja} FOUND.000 $ file *.CHK | grep PNG | cut -c 1-8 | xargs -I filename mv -v filename.CHK filename.png
FILE0026.CHK -> FILE0026.png
FILE0028.CHK -> FILE0028.png</pre>

With the extensions corrected Finder is once again previewing and opening the files correctly. It's working well for videos and images. I think multi-volume rars are going to be more of a challenge.

This was all prompted by <a href="http://manytricks.com/usher/">Usher</a> being released today. I've wanted an application to manage videos on OS X for a while.

]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>118</wp:post_id>
<wp:post_date>2010-10-16 15:08:43</wp:post_date>
<wp:post_date_gmt>2010-10-16 05:08:43</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>restoring-recovered-files-identity</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:comment>
<wp:comment_id>465</wp:comment_id>
<wp:comment_author><![CDATA[DCam]]></wp:comment_author>
<wp:comment_author_email>dave.bc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://intwoplacesatonce.com</wp:comment_author_url>
<wp:comment_author_IP>67.250.40.199</wp:comment_author_IP>
<wp:comment_date>2010-10-25 12:39:24</wp:comment_date>
<wp:comment_date_gmt>2010-10-25 02:39:24</wp:comment_date_gmt>
<wp:comment_content><![CDATA[@Bill: Unfortunately I'm grepping the output of a command -- the file command. I don't think there's a way to use -H or -n in this case.

@Andy: I moved to HFS+ right after this happened. I use mediafour's MacDrive to read the drives from Windows. At the time I wasn't that confident in the open-source NTFS drivers. I don't remember exactly how I converted the filesystem over, but I think I used Coriolis's iPartition to resize partitions during the process.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>435</wp:comment_id>
<wp:comment_author><![CDATA[Bill]]></wp:comment_author>
<wp:comment_author_email>bill@mcmilleon.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>98.206.187.181</wp:comment_author_IP>
<wp:comment_date>2010-10-17 02:50:42</wp:comment_date>
<wp:comment_date_gmt>2010-10-16 16:50:42</wp:comment_date_gmt>
<wp:comment_content><![CDATA[grep can tell you the matched filename (-H) and line number (-n).]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>443</wp:comment_id>
<wp:comment_author><![CDATA[Adam Nowotny]]></wp:comment_author>
<wp:comment_author_email>adam.nowotny@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.google.com/profiles/adam.nowotny</wp:comment_author_url>
<wp:comment_author_IP>119.11.0.219</wp:comment_author_IP>
<wp:comment_date>2010-10-19 20:36:04</wp:comment_date>
<wp:comment_date_gmt>2010-10-19 10:36:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Gave once my HD to someone and it returned with the whole filesystem messed up, including not yet published photos from recent trip. Used TestDisk from http://www.cgsecurity.org/
It's open source and does really good job finding files even if the master record has been wiped out, if only the files haven't been fragmented.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>497</wp:comment_id>
<wp:comment_author><![CDATA[DCam]]></wp:comment_author>
<wp:comment_author_email>dave.bc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://intwoplacesatonce.com</wp:comment_author_url>
<wp:comment_author_IP>69.191.241.48</wp:comment_author_IP>
<wp:comment_date>2010-11-06 00:35:24</wp:comment_date>
<wp:comment_date_gmt>2010-11-05 14:35:24</wp:comment_date_gmt>
<wp:comment_content><![CDATA[@Adam: Does TestDisk recover the filenames too?]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>438</wp:comment_id>
<wp:comment_author><![CDATA[Andy Palmer]]></wp:comment_author>
<wp:comment_author_email>andy@andypalmer.com</wp:comment_author_email>
<wp:comment_author_url>http://andypalmer.com</wp:comment_author_url>
<wp:comment_author_IP>90.152.2.74</wp:comment_author_IP>
<wp:comment_date>2010-10-18 20:15:04</wp:comment_date>
<wp:comment_date_gmt>2010-10-18 10:15:04</wp:comment_date_gmt>
<wp:comment_content><![CDATA[You can read NTFS filesystems on Mac OS using MacFUSE and NTFS3G
That might resolve some of the problems from using FAT32]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>width_and_scale.png</title>
<link>http://intwoplacesatonce.com/2011/06/the-viewport-meta-tag-and-iphone/width_and_scale-png/</link>
<pubDate>Wed, 29 Jun 2011 04:37:45 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2011/06/width_and_scale.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>122</wp:post_id>
<wp:post_date>2011-06-29 14:37:45</wp:post_date>
<wp:post_date_gmt>2011-06-29 04:37:45</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>width_and_scale-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>126</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2011/06/width_and_scale.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2011/06/width_and_scale.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"302";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:27:"2011/06/width_and_scale.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"width_and_scale-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"width_and_scale-300x151.png";s:5:"width";s:3:"300";s:6:"height";s:3:"151";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>width_and_height.png</title>
<link>http://intwoplacesatonce.com/2011/06/the-viewport-meta-tag-and-iphone/width_and_height-png/</link>
<pubDate>Wed, 29 Jun 2011 04:37:48 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2011/06/width_and_height.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>123</wp:post_id>
<wp:post_date>2011-06-29 14:37:48</wp:post_date>
<wp:post_date_gmt>2011-06-29 04:37:48</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>width_and_height-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>126</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2011/06/width_and_height.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2011/06/width_and_height.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"302";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:28:"2011/06/width_and_height.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"width_and_height-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"width_and_height-300x151.png";s:5:"width";s:3:"300";s:6:"height";s:3:"151";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>device_width_only.png</title>
<link>http://intwoplacesatonce.com/2011/06/the-viewport-meta-tag-and-iphone/device_width_only-png/</link>
<pubDate>Wed, 29 Jun 2011 04:37:51 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2011/06/device_width_only.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>124</wp:post_id>
<wp:post_date>2011-06-29 14:37:51</wp:post_date>
<wp:post_date_gmt>2011-06-29 04:37:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>device_width_only-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>126</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2011/06/device_width_only.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2011/06/device_width_only.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"302";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:29:"2011/06/device_width_only.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"device_width_only-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"device_width_only-300x151.png";s:5:"width";s:3:"300";s:6:"height";s:3:"151";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>with_max_scale.png</title>
<link>http://intwoplacesatonce.com/2011/06/the-viewport-meta-tag-and-iphone/with_max_scale-png/</link>
<pubDate>Wed, 29 Jun 2011 04:37:53 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2011/06/with_max_scale.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>125</wp:post_id>
<wp:post_date>2011-06-29 14:37:53</wp:post_date>
<wp:post_date_gmt>2011-06-29 04:37:53</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>with_max_scale-png</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>126</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2011/06/with_max_scale.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2011/06/with_max_scale.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"302";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:26:"2011/06/with_max_scale.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:26:"with_max_scale-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:26:"with_max_scale-300x151.png";s:5:"width";s:3:"300";s:6:"height";s:3:"151";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>the viewport meta tag, and iPhone</title>
<link>http://intwoplacesatonce.com/2011/06/the-viewport-meta-tag-and-iphone/</link>
<pubDate>Wed, 29 Jun 2011 04:37:58 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="html"><![CDATA[html]]></category>
<category domain="category" nicename="html5"><![CDATA[html5]]></category>
<category domain="category" nicename="layout"><![CDATA[layout]]></category>
<category domain="category" nicename="meta"><![CDATA[meta]]></category>
<category domain="category" nicename="mobile"><![CDATA[mobile]]></category>
<category domain="category" nicename="screen"><![CDATA[screen]]></category>
<category domain="category" nicename="viewport"><![CDATA[viewport]]></category>

		<category domain="tag"><![CDATA[html]]></category>

		<category domain="tag" nicename="html"><![CDATA[html]]></category>

		<category domain="tag"><![CDATA[html5]]></category>

		<category domain="tag" nicename="html5"><![CDATA[html5]]></category>

		<category domain="tag"><![CDATA[layout]]></category>

		<category domain="tag" nicename="layout"><![CDATA[layout]]></category>

		<category domain="tag"><![CDATA[meta]]></category>

		<category domain="tag" nicename="meta"><![CDATA[meta]]></category>

		<category domain="tag"><![CDATA[mobile]]></category>

		<category domain="tag" nicename="mobile"><![CDATA[mobile]]></category>

		<category domain="tag"><![CDATA[screen]]></category>

		<category domain="tag" nicename="screen"><![CDATA[screen]]></category>

		<category domain="tag"><![CDATA[viewport]]></category>

		<category domain="tag" nicename="viewport"><![CDATA[viewport]]></category>

		<category domain="tag"><![CDATA[web]]></category>

		<category domain="tag" nicename="web"><![CDATA[web]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=126</guid>
<description></description>
<content:encoded><![CDATA[Mobile phones have a couple of options when rendering existing web pages: they can render a page at the native resolution of the screen, or they can render it on a larger virtual screen and then "zoom out" so that the whole page fits on the screen. The virtual screen is called the "viewport."

Ideally screen resolution shouldn't matter for the web, but many existing pages on the web won't render well at a smartphone's native resolution. After all, even in 1993 when the web started, most screens were at least 640 pixels wide. The iPhone by contrast is 320 pixels by 480 pixels[1]. Over the years, web designers have assumed that there will be at least that much width to lay out their pages across, and don't consider how layouts break when the screen is narrower. In order to render all these existing web pages well, mobile browsers choose the path of rendering to a larger viewport and scaling the content to fit the page on screen. Safari on iOS uses 980 pixels as the default viewport width.

When targeting a web page at small screen devices, it could be nice to have the screen resolution match the viewport size. The <a href="http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html">viewport meta tag</a> was introduced to allow a designer to request exactly that, that the phone should render the page at its native resolution.

As explained in the <a href="http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html%23//apple_ref/doc/uid/TP40008193-SW1">Safari html reference</a>, there are six things that can be specified on the meta tag:
<ul>
<li>width
<li>height
<li>initial-scale
<li>minimum-scale
<li>maximum-scale
<li>user-scalable
</ul>

We found out early on in the <a href="http://m.democracynow.org">Democracy Now! mobile site</a> project that some of the attributes in combination have some surprising effects when combined with rotating the device. Ultimately, initial-scale turned out to be the culprit.

My initial guess based on the documentation was to set both width and initial-scale, but this causes the site to be "too wide" when the phone is rotated from portrait to landscape:

<img src="http://intwoplacesatonce.com/wp-content/uploads/2011/06/width_and_scale.png" alt="results of specifying both width and scale" title="width_and_scale.png" border="0" width="600" height="302" />

<pre lang='html'><meta name='viewport'
      content='width=device-width,initial-scale=1.0'></pre>


Second thought was to set height as well as width, and initial-scale. This makes the portrait to landscape rotation work as expected, but causes a similar "too wide problem" when rotating from landscape to portrait:

<img src="http://intwoplacesatonce.com/wp-content/uploads/2011/06/width_and_height.png" alt="results of specifying both width and height" title="width_and_height.png" border="0" width="600" height="302" />

<pre lang='html'><meta name='viewport'
      content='width=device-width,height=device-height,initial-scale=1.0'></pre>

The solution turned out to be not setting initial-scale at all. Device-width is enough to set the viewport width to the real width of the device, and a scale is not needed -- 1.0 is assumed it would seem.

<img src="http://intwoplacesatonce.com/wp-content/uploads/2011/06/device_width_only.png" alt="specifying only device width gives the expected result" title="device_width_only.png" border="0" width="600" height="302" />

<pre lang='html'><meta name='viewport'
      content='width=device-width'></pre>


When I come across a bug like this, I like trying to come up with a mental model of what is going wrong in the code to create the undesired behaviour. This is useful when debugging my own code and useful when trying to work around apparent bugs in other people's code.

I haven't built a good mental model of what is going wrong here. My best guess is that the width and the scale are being decided at different points during a rotation, and are getting out of sync. In the first example it could be that the width and scale are decided before rotation: 320 and 1.0. Then during rotation scaling and width are both changed, but independently. For scale, it is decided that 320 viewport pixels are now being rendered across 480 physical pixels, so scale factor can be 3/2 (three physical pixels for every 2 virtual pixels). Independently, it is decided that the page can now be rendered across 480 pixels. We end up with a viewport that is 480 virtual pixels wide, scaled by 3/2 so that only 320 of those pixels are in the visible area.

This model suggests another possible fix. If the model is correct, constraining the scale-factor to 1.0 would fix the problem. Only the number of available pixels will change, rather than both scale and width at the same time. The downside of this solution is that the user would no longer be able to zoom in. Trying it out, it works:

<img src="http://intwoplacesatonce.com/wp-content/uploads/2011/06/with_max_scale.png" alt="results of specifying max scale" title="with_max_scale.png" border="0" width="600" height="302" />

<pre lang='html'><meta name='viewport'
      content='maximum-scale=1.0,width=device-width,initial-scale=1.0'></pre>

The movement after a rotation as the page recombobulates itself seems revealing. It is different for each of the above combinations. I can't show transitions here; you'll have to try them out yourself to see.


In the end, we went with the solution of only specifying 'width=device-width'. This worked well on the iPhone and on other browsers. Other browsers have different freaky scale things that happen after a rotation, including one bug that is still affecting us on Android 2.1.

Thanks to Dani Schufeldt for testing and raising this defect until it was fixed properly, and Ted Nielsen for working the layouts around it.

[1] I'm ignoring the double-density iPhone 4 screen, because I can't remember the separate terminology to keep it all straight. I might come back later and edit the blog post.]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>126</wp:post_id>
<wp:post_date>2011-06-29 14:37:58</wp:post_date>
<wp:post_date_gmt>2011-06-29 04:37:58</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>the-viewport-meta-tag-and-iphone</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:postmeta>
<wp:meta_key>_edit_lock</wp:meta_key>
<wp:meta_value>1329793817</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_edit_last</wp:meta_key>
<wp:meta_value>1</wp:meta_value>
</wp:postmeta>
<wp:comment>
<wp:comment_id>2675</wp:comment_id>
<wp:comment_author><![CDATA[Robert]]></wp:comment_author>
<wp:comment_author_email>rbiggs@ymail.com</wp:comment_author_email>
<wp:comment_author_url>http://www.css3wizardry.com</wp:comment_author_url>
<wp:comment_author_IP>75.101.103.194</wp:comment_author_IP>
<wp:comment_date>2011-11-22 06:03:30</wp:comment_date>
<wp:comment_date_gmt>2011-11-21 20:03:30</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Actually, what happens is mobile Safari thinks that device width is the width from when the document first load. So, when switching orientation the browser isn't able to readjust the layout properly. To avoid this mess, just set your viewport meta tag like this:
name=name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=0;"
This will allow the layout to rescale from portrait to landscape mode the way native apps do.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
<item>
<title>device_width_only.png</title>
<link>http://intwoplacesatonce.com/2011/06/the-viewport-meta-tag-and-iphone/device_width_only-png-2/</link>
<pubDate>Wed, 29 Jun 2011 04:47:04 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/wp-content/uploads/2011/06/device_width_only1.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>132</wp:post_id>
<wp:post_date>2011-06-29 14:47:04</wp:post_date>
<wp:post_date_gmt>2011-06-29 04:47:04</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>device_width_only-png-2</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>126</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:attachment_url>http://intwoplacesatonce.com/wp-content/uploads/2011/06/device_width_only1.png</wp:attachment_url>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>2011/06/device_width_only1.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:6:{s:5:"width";s:4:"1144";s:6:"height";s:3:"576";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:30:"2011/06/device_width_only1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"device_width_only1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"device_width_only1-300x151.png";s:5:"width";s:3:"300";s:6:"height";s:3:"151";}s:5:"large";a:3:{s:4:"file";s:31:"device_width_only1-1024x515.png";s:5:"width";s:4:"1024";s:6:"height";s:3:"515";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>the other thing about using blocks</title>
<link>http://intwoplacesatonce.com/2011/09/the-other-thing-about-using-blocks/</link>
<pubDate>Thu, 01 Sep 2011 03:39:57 +0000</pubDate>
<dc:creator><![CDATA[DCam]]></dc:creator>
<category domain="category" nicename="blocks"><![CDATA[blocks]]></category>
<category domain="category" nicename="c"><![CDATA[c#]]></category>
<category domain="category" nicename="compiler"><![CDATA[compiler]]></category>
<category domain="category" nicename="dispose"><![CDATA[dispose]]></category>
<category domain="category" nicename="lean-on-the-compiler"><![CDATA[lean on the compiler]]></category>
<category domain="category" nicename="object-instantiation"><![CDATA[object instantiation]]></category>
<category domain="category" nicename="resource-acquisition"><![CDATA[resource acquisition]]></category>
<category domain="category" nicename="scope"><![CDATA[scope]]></category>
<category domain="category" nicename="using"><![CDATA[using]]></category>

		<category domain="tag"><![CDATA[blocks]]></category>

		<category domain="tag" nicename="blocks"><![CDATA[blocks]]></category>

		<category domain="tag"><![CDATA[compiler]]></category>

		<category domain="tag" nicename="compiler"><![CDATA[compiler]]></category>

		<category domain="tag"><![CDATA[lean on the compiler]]></category>

		<category domain="tag" nicename="lean-on-the-compiler"><![CDATA[lean on the compiler]]></category>

		<category domain="tag"><![CDATA[object instantiation]]></category>

		<category domain="tag" nicename="object-instantiation"><![CDATA[object instantiation]]></category>

		<category domain="tag"><![CDATA[resource acquisition]]></category>

		<category domain="tag" nicename="resource-acquisition"><![CDATA[resource acquisition]]></category>

		<category domain="tag"><![CDATA[scope]]></category>

		<category domain="tag" nicename="scope"><![CDATA[scope]]></category>

		<category domain="tag"><![CDATA[using]]></category>

		<category domain="tag" nicename="using"><![CDATA[using]]></category>

<guid isPermaLink="false">http://intwoplacesatonce.com/?p=145</guid>
<description></description>
<content:encoded><![CDATA[C#'s <code>using</code> statement is well recognized for one thing: calling dispose on objects so that you don't have to. That bit is wonderful:

<pre lang="csharp">string contents;
using (var f = File.OpenText("/path/to/file") {
	contents = f.ReadToEnd();
}</pre>

This is much simpler than the fully spelled out alternative:

<pre lang="csharp">string contents;
var f = File.OpenText("/path/to/file");
try {
	contents = f.ReadToEnd();
} finally {
	f.Dispose();
}</pre>

And even this longer form actually misses one of the more interesting aspects of the using statement…

<pre lang="csharp">string contents;
var f = File.OpenText("/path/to/file");
try {
	contents = f.ReadToEnd();
} finally {
	f.Dispose();
}
f.ReadToEnd(); // oops! ObjectDisposedException at runtime
f = null; // you could set it to null
f.ReadToEnd(); // but now you have a NullReferenceException, even more mysterious</pre>

The using statement on the other hand, creates a scope, so its variable can't be referenced at all after it is disposed:

<pre lang="csharp">string contents;
using (var f = File.OpenText("/path/ro/file") {
	contents = f.ReadToEnd();
}
f.ReadToEnd(); // unknown identifier error at compile-time</pre>

An entirely equivalent bit of code can be written, using an anonymous scope, but it starts to look quite baroque:

<pre lang="csharp">string contents;
{
	var f = File.OpenText("/path/ro/file");
	try {
		contents = f.ReadToEnd();
	} finally {
		f.Dispose();
	}
}
f.ReadToEnd(); // Unknown identifier at compile-time again, but 2x the lines and 2x the scopes!</pre>

using provides the try-finally-dispose structure, and also provides a scope. The scope means a whole class of errors where resources are accessed after being released is transformed from run-time to compile-time errors. Dealing with errors at compile-time is quicker, and with the right tools to highlight problems, the compile problems can be seen directly in the code as it is being edited.



]]></content:encoded>
<excerpt:encoded><![CDATA[]]></excerpt:encoded>
<wp:post_id>145</wp:post_id>
<wp:post_date>2011-09-01 13:39:57</wp:post_date>
<wp:post_date_gmt>2011-09-01 03:39:57</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>closed</wp:ping_status>
<wp:post_name>the-other-thing-about-using-blocks</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
<wp:comment>
<wp:comment_id>2254</wp:comment_id>
<wp:comment_author><![CDATA[ross]]></wp:comment_author>
<wp:comment_author_email>rjempson@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>203.55.42.201</wp:comment_author_IP>
<wp:comment_date>2011-09-01 15:13:49</wp:comment_date>
<wp:comment_date_gmt>2011-09-01 05:13:49</wp:comment_date_gmt>
<wp:comment_content><![CDATA[good point.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2259</wp:comment_id>
<wp:comment_author><![CDATA[DCam]]></wp:comment_author>
<wp:comment_author_email>dave.bc@gmail.com</wp:comment_author_email>
<wp:comment_author_url>http://intwoplacesatonce.com</wp:comment_author_url>
<wp:comment_author_IP>173.251.11.67</wp:comment_author_IP>
<wp:comment_date>2011-09-03 01:19:23</wp:comment_date>
<wp:comment_date_gmt>2011-09-02 15:19:23</wp:comment_date_gmt>
<wp:comment_content><![CDATA[@Teevus: You're right. I try to speak to anonymous scopes in the very last example, but yes, they can be free standing as well. I wouldn't want to use a "using" statement only to produce a scope, because an anonymous scope would do the same job more simply. Even when I am tempted to use an anonymous scope to limit some variable, I try to think up a good name for the scope and turn it in to a method.]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>2256</wp:comment_parent>
<wp:comment_user_id>1</wp:comment_user_id>
</wp:comment>
<wp:comment>
<wp:comment_id>2256</wp:comment_id>
<wp:comment_author><![CDATA[Teevus]]></wp:comment_author>
<wp:comment_author_email>matthew.oleary@gmail.com</wp:comment_author_email>
<wp:comment_author_url></wp:comment_author_url>
<wp:comment_author_IP>202.0.15.170</wp:comment_author_IP>
<wp:comment_date>2011-09-01 18:51:06</wp:comment_date>
<wp:comment_date_gmt>2011-09-01 08:51:06</wp:comment_date_gmt>
<wp:comment_content><![CDATA[Or you can just enclose the variable declaration and usage in a pair of curly brases (also works for non-IDisposable variables):

{
  var f = File.OpenText("/path/ro/file");
  contents = f.ReadToEnd();
}
f.ReadToEnd(); // Unknown identifier at compile time]]></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
<wp:comment_user_id>0</wp:comment_user_id>
</wp:comment>
	</item>
</channel>
</rss>
